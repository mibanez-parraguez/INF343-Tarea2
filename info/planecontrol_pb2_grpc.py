# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import planecontrol_pb2 as planecontrol__pb2


class PlaneControlServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Land = channel.stream_stream(
        '/tareados.PlaneControlService/Land',
        request_serializer=planecontrol__pb2.LandRequest.SerializeToString,
        response_deserializer=planecontrol__pb2.LandResponse.FromString,
        )
    self.Takeoff = channel.stream_stream(
        '/tareados.PlaneControlService/Takeoff',
        request_serializer=planecontrol__pb2.TakeoffRequest.SerializeToString,
        response_deserializer=planecontrol__pb2.TakeoffResponse.FromString,
        )
    self.Info = channel.unary_stream(
        '/tareados.PlaneControlService/Info',
        request_serializer=planecontrol__pb2.InfoRequest.SerializeToString,
        response_deserializer=planecontrol__pb2.InfoResponse.FromString,
        )


class PlaneControlServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Land(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Takeoff(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Info(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PlaneControlServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Land': grpc.stream_stream_rpc_method_handler(
          servicer.Land,
          request_deserializer=planecontrol__pb2.LandRequest.FromString,
          response_serializer=planecontrol__pb2.LandResponse.SerializeToString,
      ),
      'Takeoff': grpc.stream_stream_rpc_method_handler(
          servicer.Takeoff,
          request_deserializer=planecontrol__pb2.TakeoffRequest.FromString,
          response_serializer=planecontrol__pb2.TakeoffResponse.SerializeToString,
      ),
      'Info': grpc.unary_stream_rpc_method_handler(
          servicer.Info,
          request_deserializer=planecontrol__pb2.InfoRequest.FromString,
          response_serializer=planecontrol__pb2.InfoResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tareados.PlaneControlService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
