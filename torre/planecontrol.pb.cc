// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planecontrol.proto

#include "planecontrol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_planecontrol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_planecontrol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlaneMsge;
}  // namespace protobuf_planecontrol_2eproto
namespace tareados {
class LandRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LandRequest>
      _instance;
} _LandRequest_default_instance_;
class LandResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LandResponse>
      _instance;
} _LandResponse_default_instance_;
class TakeoffRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TakeoffRequest>
      _instance;
} _TakeoffRequest_default_instance_;
class TakeoffResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TakeoffResponse>
      _instance;
} _TakeoffResponse_default_instance_;
class PlaneMsgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlaneMsge>
      _instance;
} _PlaneMsge_default_instance_;
}  // namespace tareados
namespace protobuf_planecontrol_2eproto {
static void InitDefaultsLandRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tareados::_LandRequest_default_instance_;
    new (ptr) ::tareados::LandRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tareados::LandRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LandRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLandRequest}, {
      &protobuf_planecontrol_2eproto::scc_info_PlaneMsge.base,}};

static void InitDefaultsLandResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tareados::_LandResponse_default_instance_;
    new (ptr) ::tareados::LandResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tareados::LandResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LandResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLandResponse}, {}};

static void InitDefaultsTakeoffRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tareados::_TakeoffRequest_default_instance_;
    new (ptr) ::tareados::TakeoffRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tareados::TakeoffRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TakeoffRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTakeoffRequest}, {
      &protobuf_planecontrol_2eproto::scc_info_PlaneMsge.base,}};

static void InitDefaultsTakeoffResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tareados::_TakeoffResponse_default_instance_;
    new (ptr) ::tareados::TakeoffResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tareados::TakeoffResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TakeoffResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTakeoffResponse}, {}};

static void InitDefaultsPlaneMsge() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tareados::_PlaneMsge_default_instance_;
    new (ptr) ::tareados::PlaneMsge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tareados::PlaneMsge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlaneMsge =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlaneMsge}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LandRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LandResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TakeoffRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TakeoffResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlaneMsge.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::LandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::LandRequest, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::LandRequest, plane_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::LandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::LandResponse, runway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::LandResponse, queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::LandResponse, altitude_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffRequest, plane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffRequest, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffRequest, instok_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffResponse, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffResponse, runway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffResponse, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffResponse, queuepos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffResponse, prevplane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffResponse, destok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffResponse, restrok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::TakeoffResponse, instok_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, airline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, planenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, maxload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, currload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, maxcapacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, currcapacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, sourceaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, destaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tareados::PlaneMsge, runway_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tareados::LandRequest)},
  { 7, -1, sizeof(::tareados::LandResponse)},
  { 15, -1, sizeof(::tareados::TakeoffRequest)},
  { 23, -1, sizeof(::tareados::TakeoffResponse)},
  { 36, -1, sizeof(::tareados::PlaneMsge)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tareados::_LandRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tareados::_LandResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tareados::_TakeoffRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tareados::_TakeoffResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tareados::_PlaneMsge_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "planecontrol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022planecontrol.proto\022\010tareados\"\?\n\013LandRe"
      "quest\022\014\n\004dest\030\001 \001(\t\022\"\n\005plane\030\002 \001(\0132\023.tar"
      "eados.PlaneMsge\"\?\n\014LandResponse\022\016\n\006runwa"
      "y\030\001 \001(\005\022\r\n\005queue\030\002 \001(\005\022\020\n\010altitude\030\003 \001(\005"
      "\"R\n\016TakeoffRequest\022\"\n\005plane\030\001 \001(\0132\023.tare"
      "ados.PlaneMsge\022\014\n\004dest\030\002 \001(\t\022\016\n\006instOK\030\003"
      " \001(\010\"\227\001\n\017TakeoffResponse\022\020\n\010altitude\030\001 \001"
      "(\005\022\016\n\006runway\030\002 \001(\005\022\014\n\004dest\030\003 \001(\t\022\020\n\010queu"
      "ePos\030\004 \001(\005\022\021\n\tprevPlane\030\005 \001(\t\022\016\n\006destOK\030"
      "\006 \001(\010\022\017\n\007restrOK\030\007 \001(\010\022\016\n\006instOK\030\010 \001(\010\"\273"
      "\001\n\tPlaneMsge\022\017\n\007airline\030\001 \001(\t\022\023\n\013planeNu"
      "mber\030\002 \001(\t\022\017\n\007maxLoad\030\003 \001(\005\022\020\n\010currLoad\030"
      "\004 \001(\005\022\023\n\013maxCapacity\030\005 \001(\005\022\024\n\014currCapaci"
      "ty\030\006 \001(\005\022\025\n\rsourceAddress\030\007 \001(\t\022\023\n\013destA"
      "ddress\030\010 \001(\t\022\016\n\006runway\030\t \001(\0052\230\001\n\023PlaneCo"
      "ntrolService\022;\n\004Land\022\025.tareados.LandRequ"
      "est\032\026.tareados.LandResponse\"\000(\0010\001\022D\n\007Tak"
      "eoff\022\030.tareados.TakeoffRequest\032\031.tareado"
      "s.TakeoffResponse\"\000(\0010\001B#\n\013avion.protoB\022"
      "PlaneControlProtosP\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 788);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planecontrol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planecontrol_2eproto
namespace tareados {

// ===================================================================

void LandRequest::InitAsDefaultInstance() {
  ::tareados::_LandRequest_default_instance_._instance.get_mutable()->plane_ = const_cast< ::tareados::PlaneMsge*>(
      ::tareados::PlaneMsge::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandRequest::kDestFieldNumber;
const int LandRequest::kPlaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandRequest::LandRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planecontrol_2eproto::scc_info_LandRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tareados.LandRequest)
}
LandRequest::LandRequest(const LandRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest().size() > 0) {
    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.has_plane()) {
    plane_ = new ::tareados::PlaneMsge(*from.plane_);
  } else {
    plane_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tareados.LandRequest)
}

void LandRequest::SharedCtor() {
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plane_ = NULL;
}

LandRequest::~LandRequest() {
  // @@protoc_insertion_point(destructor:tareados.LandRequest)
  SharedDtor();
}

void LandRequest::SharedDtor() {
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plane_;
}

void LandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LandRequest::descriptor() {
  ::protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandRequest& LandRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planecontrol_2eproto::scc_info_LandRequest.base);
  return *internal_default_instance();
}


void LandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tareados.LandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && plane_ != NULL) {
    delete plane_;
  }
  plane_ = NULL;
  _internal_metadata_.Clear();
}

bool LandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tareados.LandRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest().data(), static_cast<int>(this->dest().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tareados.LandRequest.dest"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tareados.PlaneMsge plane = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tareados.LandRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tareados.LandRequest)
  return false;
#undef DO_
}

void LandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tareados.LandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dest = 1;
  if (this->dest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.LandRequest.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dest(), output);
  }

  // .tareados.PlaneMsge plane = 2;
  if (this->has_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_plane(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tareados.LandRequest)
}

::google::protobuf::uint8* LandRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tareados.LandRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dest = 1;
  if (this->dest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.LandRequest.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dest(), target);
  }

  // .tareados.PlaneMsge plane = 2;
  if (this->has_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_plane(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tareados.LandRequest)
  return target;
}

size_t LandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tareados.LandRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dest = 1;
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  // .tareados.PlaneMsge plane = 2;
  if (this->has_plane()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plane_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tareados.LandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LandRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tareados.LandRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tareados.LandRequest)
    MergeFrom(*source);
  }
}

void LandRequest::MergeFrom(const LandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tareados.LandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dest().size() > 0) {

    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.has_plane()) {
    mutable_plane()->::tareados::PlaneMsge::MergeFrom(from.plane());
  }
}

void LandRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tareados.LandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandRequest::CopyFrom(const LandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tareados.LandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandRequest::IsInitialized() const {
  return true;
}

void LandRequest::Swap(LandRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandRequest::InternalSwap(LandRequest* other) {
  using std::swap;
  dest_.Swap(&other->dest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(plane_, other->plane_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LandRequest::GetMetadata() const {
  protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LandResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandResponse::kRunwayFieldNumber;
const int LandResponse::kQueueFieldNumber;
const int LandResponse::kAltitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandResponse::LandResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planecontrol_2eproto::scc_info_LandResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tareados.LandResponse)
}
LandResponse::LandResponse(const LandResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&runway_, &from.runway_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&runway_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:tareados.LandResponse)
}

void LandResponse::SharedCtor() {
  ::memset(&runway_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&runway_)) + sizeof(altitude_));
}

LandResponse::~LandResponse() {
  // @@protoc_insertion_point(destructor:tareados.LandResponse)
  SharedDtor();
}

void LandResponse::SharedDtor() {
}

void LandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LandResponse::descriptor() {
  ::protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandResponse& LandResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planecontrol_2eproto::scc_info_LandResponse.base);
  return *internal_default_instance();
}


void LandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tareados.LandResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&runway_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&runway_)) + sizeof(altitude_));
  _internal_metadata_.Clear();
}

bool LandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tareados.LandResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 runway = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &runway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 queue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tareados.LandResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tareados.LandResponse)
  return false;
#undef DO_
}

void LandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tareados.LandResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 runway = 1;
  if (this->runway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->runway(), output);
  }

  // int32 queue = 2;
  if (this->queue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->queue(), output);
  }

  // int32 altitude = 3;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->altitude(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tareados.LandResponse)
}

::google::protobuf::uint8* LandResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tareados.LandResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 runway = 1;
  if (this->runway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->runway(), target);
  }

  // int32 queue = 2;
  if (this->queue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->queue(), target);
  }

  // int32 altitude = 3;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->altitude(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tareados.LandResponse)
  return target;
}

size_t LandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tareados.LandResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 runway = 1;
  if (this->runway() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->runway());
  }

  // int32 queue = 2;
  if (this->queue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queue());
  }

  // int32 altitude = 3;
  if (this->altitude() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->altitude());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tareados.LandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LandResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tareados.LandResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tareados.LandResponse)
    MergeFrom(*source);
  }
}

void LandResponse::MergeFrom(const LandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tareados.LandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.runway() != 0) {
    set_runway(from.runway());
  }
  if (from.queue() != 0) {
    set_queue(from.queue());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
}

void LandResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tareados.LandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandResponse::CopyFrom(const LandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tareados.LandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandResponse::IsInitialized() const {
  return true;
}

void LandResponse::Swap(LandResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandResponse::InternalSwap(LandResponse* other) {
  using std::swap;
  swap(runway_, other->runway_);
  swap(queue_, other->queue_);
  swap(altitude_, other->altitude_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LandResponse::GetMetadata() const {
  protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TakeoffRequest::InitAsDefaultInstance() {
  ::tareados::_TakeoffRequest_default_instance_._instance.get_mutable()->plane_ = const_cast< ::tareados::PlaneMsge*>(
      ::tareados::PlaneMsge::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeoffRequest::kPlaneFieldNumber;
const int TakeoffRequest::kDestFieldNumber;
const int TakeoffRequest::kInstOKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeoffRequest::TakeoffRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planecontrol_2eproto::scc_info_TakeoffRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tareados.TakeoffRequest)
}
TakeoffRequest::TakeoffRequest(const TakeoffRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest().size() > 0) {
    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.has_plane()) {
    plane_ = new ::tareados::PlaneMsge(*from.plane_);
  } else {
    plane_ = NULL;
  }
  instok_ = from.instok_;
  // @@protoc_insertion_point(copy_constructor:tareados.TakeoffRequest)
}

void TakeoffRequest::SharedCtor() {
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&plane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instok_) -
      reinterpret_cast<char*>(&plane_)) + sizeof(instok_));
}

TakeoffRequest::~TakeoffRequest() {
  // @@protoc_insertion_point(destructor:tareados.TakeoffRequest)
  SharedDtor();
}

void TakeoffRequest::SharedDtor() {
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plane_;
}

void TakeoffRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TakeoffRequest::descriptor() {
  ::protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeoffRequest& TakeoffRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planecontrol_2eproto::scc_info_TakeoffRequest.base);
  return *internal_default_instance();
}


void TakeoffRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tareados.TakeoffRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && plane_ != NULL) {
    delete plane_;
  }
  plane_ = NULL;
  instok_ = false;
  _internal_metadata_.Clear();
}

bool TakeoffRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tareados.TakeoffRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tareados.PlaneMsge plane = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest().data(), static_cast<int>(this->dest().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tareados.TakeoffRequest.dest"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool instOK = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &instok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tareados.TakeoffRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tareados.TakeoffRequest)
  return false;
#undef DO_
}

void TakeoffRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tareados.TakeoffRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tareados.PlaneMsge plane = 1;
  if (this->has_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_plane(), output);
  }

  // string dest = 2;
  if (this->dest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.TakeoffRequest.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest(), output);
  }

  // bool instOK = 3;
  if (this->instok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->instok(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tareados.TakeoffRequest)
}

::google::protobuf::uint8* TakeoffRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tareados.TakeoffRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tareados.PlaneMsge plane = 1;
  if (this->has_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_plane(), deterministic, target);
  }

  // string dest = 2;
  if (this->dest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.TakeoffRequest.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // bool instOK = 3;
  if (this->instok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->instok(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tareados.TakeoffRequest)
  return target;
}

size_t TakeoffRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tareados.TakeoffRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dest = 2;
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  // .tareados.PlaneMsge plane = 1;
  if (this->has_plane()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plane_);
  }

  // bool instOK = 3;
  if (this->instok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakeoffRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tareados.TakeoffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeoffRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeoffRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tareados.TakeoffRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tareados.TakeoffRequest)
    MergeFrom(*source);
  }
}

void TakeoffRequest::MergeFrom(const TakeoffRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tareados.TakeoffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dest().size() > 0) {

    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.has_plane()) {
    mutable_plane()->::tareados::PlaneMsge::MergeFrom(from.plane());
  }
  if (from.instok() != 0) {
    set_instok(from.instok());
  }
}

void TakeoffRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tareados.TakeoffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeoffRequest::CopyFrom(const TakeoffRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tareados.TakeoffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeoffRequest::IsInitialized() const {
  return true;
}

void TakeoffRequest::Swap(TakeoffRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeoffRequest::InternalSwap(TakeoffRequest* other) {
  using std::swap;
  dest_.Swap(&other->dest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(plane_, other->plane_);
  swap(instok_, other->instok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TakeoffRequest::GetMetadata() const {
  protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TakeoffResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeoffResponse::kAltitudeFieldNumber;
const int TakeoffResponse::kRunwayFieldNumber;
const int TakeoffResponse::kDestFieldNumber;
const int TakeoffResponse::kQueuePosFieldNumber;
const int TakeoffResponse::kPrevPlaneFieldNumber;
const int TakeoffResponse::kDestOKFieldNumber;
const int TakeoffResponse::kRestrOKFieldNumber;
const int TakeoffResponse::kInstOKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeoffResponse::TakeoffResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planecontrol_2eproto::scc_info_TakeoffResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tareados.TakeoffResponse)
}
TakeoffResponse::TakeoffResponse(const TakeoffResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest().size() > 0) {
    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  prevplane_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prevplane().size() > 0) {
    prevplane_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prevplane_);
  }
  ::memcpy(&altitude_, &from.altitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&instok_) -
    reinterpret_cast<char*>(&altitude_)) + sizeof(instok_));
  // @@protoc_insertion_point(copy_constructor:tareados.TakeoffResponse)
}

void TakeoffResponse::SharedCtor() {
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prevplane_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instok_) -
      reinterpret_cast<char*>(&altitude_)) + sizeof(instok_));
}

TakeoffResponse::~TakeoffResponse() {
  // @@protoc_insertion_point(destructor:tareados.TakeoffResponse)
  SharedDtor();
}

void TakeoffResponse::SharedDtor() {
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prevplane_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TakeoffResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TakeoffResponse::descriptor() {
  ::protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeoffResponse& TakeoffResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planecontrol_2eproto::scc_info_TakeoffResponse.base);
  return *internal_default_instance();
}


void TakeoffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tareados.TakeoffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prevplane_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instok_) -
      reinterpret_cast<char*>(&altitude_)) + sizeof(instok_));
  _internal_metadata_.Clear();
}

bool TakeoffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tareados.TakeoffResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 altitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 runway = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &runway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest().data(), static_cast<int>(this->dest().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tareados.TakeoffResponse.dest"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 queuePos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuepos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prevPlane = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prevplane()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prevplane().data(), static_cast<int>(this->prevplane().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tareados.TakeoffResponse.prevPlane"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool destOK = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool restrOK = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &restrok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool instOK = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &instok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tareados.TakeoffResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tareados.TakeoffResponse)
  return false;
#undef DO_
}

void TakeoffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tareados.TakeoffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 altitude = 1;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->altitude(), output);
  }

  // int32 runway = 2;
  if (this->runway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->runway(), output);
  }

  // string dest = 3;
  if (this->dest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.TakeoffResponse.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dest(), output);
  }

  // int32 queuePos = 4;
  if (this->queuepos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->queuepos(), output);
  }

  // string prevPlane = 5;
  if (this->prevplane().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prevplane().data(), static_cast<int>(this->prevplane().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.TakeoffResponse.prevPlane");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->prevplane(), output);
  }

  // bool destOK = 6;
  if (this->destok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->destok(), output);
  }

  // bool restrOK = 7;
  if (this->restrok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->restrok(), output);
  }

  // bool instOK = 8;
  if (this->instok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->instok(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tareados.TakeoffResponse)
}

::google::protobuf::uint8* TakeoffResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tareados.TakeoffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 altitude = 1;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->altitude(), target);
  }

  // int32 runway = 2;
  if (this->runway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->runway(), target);
  }

  // string dest = 3;
  if (this->dest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.TakeoffResponse.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dest(), target);
  }

  // int32 queuePos = 4;
  if (this->queuepos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->queuepos(), target);
  }

  // string prevPlane = 5;
  if (this->prevplane().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prevplane().data(), static_cast<int>(this->prevplane().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.TakeoffResponse.prevPlane");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prevplane(), target);
  }

  // bool destOK = 6;
  if (this->destok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->destok(), target);
  }

  // bool restrOK = 7;
  if (this->restrok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->restrok(), target);
  }

  // bool instOK = 8;
  if (this->instok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->instok(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tareados.TakeoffResponse)
  return target;
}

size_t TakeoffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tareados.TakeoffResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dest = 3;
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  // string prevPlane = 5;
  if (this->prevplane().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prevplane());
  }

  // int32 altitude = 1;
  if (this->altitude() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->altitude());
  }

  // int32 runway = 2;
  if (this->runway() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->runway());
  }

  // int32 queuePos = 4;
  if (this->queuepos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->queuepos());
  }

  // bool destOK = 6;
  if (this->destok() != 0) {
    total_size += 1 + 1;
  }

  // bool restrOK = 7;
  if (this->restrok() != 0) {
    total_size += 1 + 1;
  }

  // bool instOK = 8;
  if (this->instok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakeoffResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tareados.TakeoffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeoffResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeoffResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tareados.TakeoffResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tareados.TakeoffResponse)
    MergeFrom(*source);
  }
}

void TakeoffResponse::MergeFrom(const TakeoffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tareados.TakeoffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dest().size() > 0) {

    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.prevplane().size() > 0) {

    prevplane_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prevplane_);
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.runway() != 0) {
    set_runway(from.runway());
  }
  if (from.queuepos() != 0) {
    set_queuepos(from.queuepos());
  }
  if (from.destok() != 0) {
    set_destok(from.destok());
  }
  if (from.restrok() != 0) {
    set_restrok(from.restrok());
  }
  if (from.instok() != 0) {
    set_instok(from.instok());
  }
}

void TakeoffResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tareados.TakeoffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeoffResponse::CopyFrom(const TakeoffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tareados.TakeoffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeoffResponse::IsInitialized() const {
  return true;
}

void TakeoffResponse::Swap(TakeoffResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeoffResponse::InternalSwap(TakeoffResponse* other) {
  using std::swap;
  dest_.Swap(&other->dest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prevplane_.Swap(&other->prevplane_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(altitude_, other->altitude_);
  swap(runway_, other->runway_);
  swap(queuepos_, other->queuepos_);
  swap(destok_, other->destok_);
  swap(restrok_, other->restrok_);
  swap(instok_, other->instok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TakeoffResponse::GetMetadata() const {
  protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlaneMsge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlaneMsge::kAirlineFieldNumber;
const int PlaneMsge::kPlaneNumberFieldNumber;
const int PlaneMsge::kMaxLoadFieldNumber;
const int PlaneMsge::kCurrLoadFieldNumber;
const int PlaneMsge::kMaxCapacityFieldNumber;
const int PlaneMsge::kCurrCapacityFieldNumber;
const int PlaneMsge::kSourceAddressFieldNumber;
const int PlaneMsge::kDestAddressFieldNumber;
const int PlaneMsge::kRunwayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlaneMsge::PlaneMsge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_planecontrol_2eproto::scc_info_PlaneMsge.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:tareados.PlaneMsge)
}
PlaneMsge::PlaneMsge(const PlaneMsge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  airline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.airline().size() > 0) {
    airline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.airline_);
  }
  planenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.planenumber().size() > 0) {
    planenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planenumber_);
  }
  sourceaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sourceaddress().size() > 0) {
    sourceaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceaddress_);
  }
  destaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destaddress().size() > 0) {
    destaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destaddress_);
  }
  ::memcpy(&maxload_, &from.maxload_,
    static_cast<size_t>(reinterpret_cast<char*>(&runway_) -
    reinterpret_cast<char*>(&maxload_)) + sizeof(runway_));
  // @@protoc_insertion_point(copy_constructor:tareados.PlaneMsge)
}

void PlaneMsge::SharedCtor() {
  airline_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  planenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runway_) -
      reinterpret_cast<char*>(&maxload_)) + sizeof(runway_));
}

PlaneMsge::~PlaneMsge() {
  // @@protoc_insertion_point(destructor:tareados.PlaneMsge)
  SharedDtor();
}

void PlaneMsge::SharedDtor() {
  airline_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  planenumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlaneMsge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlaneMsge::descriptor() {
  ::protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlaneMsge& PlaneMsge::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_planecontrol_2eproto::scc_info_PlaneMsge.base);
  return *internal_default_instance();
}


void PlaneMsge::Clear() {
// @@protoc_insertion_point(message_clear_start:tareados.PlaneMsge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  airline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  planenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&runway_) -
      reinterpret_cast<char*>(&maxload_)) + sizeof(runway_));
  _internal_metadata_.Clear();
}

bool PlaneMsge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tareados.PlaneMsge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string airline = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_airline()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->airline().data(), static_cast<int>(this->airline().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tareados.PlaneMsge.airline"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string planeNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planenumber()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->planenumber().data(), static_cast<int>(this->planenumber().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tareados.PlaneMsge.planeNumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxLoad = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currLoad = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxCapacity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcapacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currCapacity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currcapacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sourceAddress = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourceaddress().data(), static_cast<int>(this->sourceaddress().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tareados.PlaneMsge.sourceAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destAddress = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destaddress().data(), static_cast<int>(this->destaddress().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tareados.PlaneMsge.destAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 runway = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &runway_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tareados.PlaneMsge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tareados.PlaneMsge)
  return false;
#undef DO_
}

void PlaneMsge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tareados.PlaneMsge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string airline = 1;
  if (this->airline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->airline().data(), static_cast<int>(this->airline().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.PlaneMsge.airline");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->airline(), output);
  }

  // string planeNumber = 2;
  if (this->planenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->planenumber().data(), static_cast<int>(this->planenumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.PlaneMsge.planeNumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->planenumber(), output);
  }

  // int32 maxLoad = 3;
  if (this->maxload() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxload(), output);
  }

  // int32 currLoad = 4;
  if (this->currload() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currload(), output);
  }

  // int32 maxCapacity = 5;
  if (this->maxcapacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxcapacity(), output);
  }

  // int32 currCapacity = 6;
  if (this->currcapacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currcapacity(), output);
  }

  // string sourceAddress = 7;
  if (this->sourceaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourceaddress().data(), static_cast<int>(this->sourceaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.PlaneMsge.sourceAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sourceaddress(), output);
  }

  // string destAddress = 8;
  if (this->destaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destaddress().data(), static_cast<int>(this->destaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.PlaneMsge.destAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->destaddress(), output);
  }

  // int32 runway = 9;
  if (this->runway() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->runway(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tareados.PlaneMsge)
}

::google::protobuf::uint8* PlaneMsge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tareados.PlaneMsge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string airline = 1;
  if (this->airline().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->airline().data(), static_cast<int>(this->airline().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.PlaneMsge.airline");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->airline(), target);
  }

  // string planeNumber = 2;
  if (this->planenumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->planenumber().data(), static_cast<int>(this->planenumber().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.PlaneMsge.planeNumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->planenumber(), target);
  }

  // int32 maxLoad = 3;
  if (this->maxload() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxload(), target);
  }

  // int32 currLoad = 4;
  if (this->currload() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currload(), target);
  }

  // int32 maxCapacity = 5;
  if (this->maxcapacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxcapacity(), target);
  }

  // int32 currCapacity = 6;
  if (this->currcapacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currcapacity(), target);
  }

  // string sourceAddress = 7;
  if (this->sourceaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourceaddress().data(), static_cast<int>(this->sourceaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.PlaneMsge.sourceAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sourceaddress(), target);
  }

  // string destAddress = 8;
  if (this->destaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destaddress().data(), static_cast<int>(this->destaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tareados.PlaneMsge.destAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->destaddress(), target);
  }

  // int32 runway = 9;
  if (this->runway() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->runway(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tareados.PlaneMsge)
  return target;
}

size_t PlaneMsge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tareados.PlaneMsge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string airline = 1;
  if (this->airline().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->airline());
  }

  // string planeNumber = 2;
  if (this->planenumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->planenumber());
  }

  // string sourceAddress = 7;
  if (this->sourceaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourceaddress());
  }

  // string destAddress = 8;
  if (this->destaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destaddress());
  }

  // int32 maxLoad = 3;
  if (this->maxload() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxload());
  }

  // int32 currLoad = 4;
  if (this->currload() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currload());
  }

  // int32 maxCapacity = 5;
  if (this->maxcapacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxcapacity());
  }

  // int32 currCapacity = 6;
  if (this->currcapacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currcapacity());
  }

  // int32 runway = 9;
  if (this->runway() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->runway());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaneMsge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tareados.PlaneMsge)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaneMsge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaneMsge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tareados.PlaneMsge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tareados.PlaneMsge)
    MergeFrom(*source);
  }
}

void PlaneMsge::MergeFrom(const PlaneMsge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tareados.PlaneMsge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.airline().size() > 0) {

    airline_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.airline_);
  }
  if (from.planenumber().size() > 0) {

    planenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planenumber_);
  }
  if (from.sourceaddress().size() > 0) {

    sourceaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceaddress_);
  }
  if (from.destaddress().size() > 0) {

    destaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destaddress_);
  }
  if (from.maxload() != 0) {
    set_maxload(from.maxload());
  }
  if (from.currload() != 0) {
    set_currload(from.currload());
  }
  if (from.maxcapacity() != 0) {
    set_maxcapacity(from.maxcapacity());
  }
  if (from.currcapacity() != 0) {
    set_currcapacity(from.currcapacity());
  }
  if (from.runway() != 0) {
    set_runway(from.runway());
  }
}

void PlaneMsge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tareados.PlaneMsge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaneMsge::CopyFrom(const PlaneMsge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tareados.PlaneMsge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaneMsge::IsInitialized() const {
  return true;
}

void PlaneMsge::Swap(PlaneMsge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaneMsge::InternalSwap(PlaneMsge* other) {
  using std::swap;
  airline_.Swap(&other->airline_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  planenumber_.Swap(&other->planenumber_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sourceaddress_.Swap(&other->sourceaddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destaddress_.Swap(&other->destaddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(maxload_, other->maxload_);
  swap(currload_, other->currload_);
  swap(maxcapacity_, other->maxcapacity_);
  swap(currcapacity_, other->currcapacity_);
  swap(runway_, other->runway_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlaneMsge::GetMetadata() const {
  protobuf_planecontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planecontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tareados
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tareados::LandRequest* Arena::CreateMaybeMessage< ::tareados::LandRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tareados::LandRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tareados::LandResponse* Arena::CreateMaybeMessage< ::tareados::LandResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tareados::LandResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tareados::TakeoffRequest* Arena::CreateMaybeMessage< ::tareados::TakeoffRequest >(Arena* arena) {
  return Arena::CreateInternal< ::tareados::TakeoffRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tareados::TakeoffResponse* Arena::CreateMaybeMessage< ::tareados::TakeoffResponse >(Arena* arena) {
  return Arena::CreateInternal< ::tareados::TakeoffResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::tareados::PlaneMsge* Arena::CreateMaybeMessage< ::tareados::PlaneMsge >(Arena* arena) {
  return Arena::CreateInternal< ::tareados::PlaneMsge >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
