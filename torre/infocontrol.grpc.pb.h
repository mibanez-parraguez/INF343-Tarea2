// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: infocontrol.proto
// Original file comments:
//
//
#ifndef GRPC_infocontrol_2eproto__INCLUDED
#define GRPC_infocontrol_2eproto__INCLUDED

#include "infocontrol.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tareadosinfo {

class InfoService final {
 public:
  static constexpr char const* service_full_name() {
    return "tareadosinfo.InfoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tareadosinfo::InfoResponse>> Info(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tareadosinfo::InfoResponse>>(InfoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tareadosinfo::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tareadosinfo::InfoResponse>>(AsyncInfoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tareadosinfo::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tareadosinfo::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::tareadosinfo::InfoResponse>* InfoRaw(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tareadosinfo::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tareadosinfo::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::tareadosinfo::InfoResponse>> Info(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tareadosinfo::InfoResponse>>(InfoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tareadosinfo::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tareadosinfo::InfoResponse>>(AsyncInfoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tareadosinfo::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tareadosinfo::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientReader< ::tareadosinfo::InfoResponse>* InfoRaw(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request) override;
    ::grpc::ClientAsyncReader< ::tareadosinfo::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tareadosinfo::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::tareadosinfo::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Info_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Info(::grpc::ServerContext* context, const ::tareadosinfo::InfoRequest* request, ::grpc::ServerWriter< ::tareadosinfo::InfoResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Info() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::tareadosinfo::InfoRequest* request, ::grpc::ServerWriter< ::tareadosinfo::InfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::tareadosinfo::InfoRequest* request, ::grpc::ServerAsyncWriter< ::tareadosinfo::InfoResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Info<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Info() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::tareadosinfo::InfoRequest* request, ::grpc::ServerWriter< ::tareadosinfo::InfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Info() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::tareadosinfo::InfoRequest* request, ::grpc::ServerWriter< ::tareadosinfo::InfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Info() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::tareadosinfo::InfoRequest, ::tareadosinfo::InfoResponse>(std::bind(&WithSplitStreamingMethod_Info<BaseClass>::StreamedInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::tareadosinfo::InfoRequest* request, ::grpc::ServerWriter< ::tareadosinfo::InfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedInfo(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tareadosinfo::InfoRequest,::tareadosinfo::InfoResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Info<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Info<Service > StreamedService;
};

}  // namespace tareadosinfo


#endif  // GRPC_infocontrol_2eproto__INCLUDED
