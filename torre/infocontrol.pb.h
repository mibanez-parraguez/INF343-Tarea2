// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: infocontrol.proto

#ifndef PROTOBUF_INCLUDED_infocontrol_2eproto
#define PROTOBUF_INCLUDED_infocontrol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_infocontrol_2eproto 

namespace protobuf_infocontrol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_infocontrol_2eproto
namespace tareadosinfo {
class InfoRequest;
class InfoRequestDefaultTypeInternal;
extern InfoRequestDefaultTypeInternal _InfoRequest_default_instance_;
class InfoResponse;
class InfoResponseDefaultTypeInternal;
extern InfoResponseDefaultTypeInternal _InfoResponse_default_instance_;
class PlaneMsge;
class PlaneMsgeDefaultTypeInternal;
extern PlaneMsgeDefaultTypeInternal _PlaneMsge_default_instance_;
}  // namespace tareadosinfo
namespace google {
namespace protobuf {
template<> ::tareadosinfo::InfoRequest* Arena::CreateMaybeMessage<::tareadosinfo::InfoRequest>(Arena*);
template<> ::tareadosinfo::InfoResponse* Arena::CreateMaybeMessage<::tareadosinfo::InfoResponse>(Arena*);
template<> ::tareadosinfo::PlaneMsge* Arena::CreateMaybeMessage<::tareadosinfo::PlaneMsge>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tareadosinfo {

// ===================================================================

class InfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareadosinfo.InfoRequest) */ {
 public:
  InfoRequest();
  virtual ~InfoRequest();

  InfoRequest(const InfoRequest& from);

  inline InfoRequest& operator=(const InfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoRequest(InfoRequest&& from) noexcept
    : InfoRequest() {
    *this = ::std::move(from);
  }

  inline InfoRequest& operator=(InfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoRequest* internal_default_instance() {
    return reinterpret_cast<const InfoRequest*>(
               &_InfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InfoRequest* other);
  friend void swap(InfoRequest& a, InfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoRequest* New() const final {
    return CreateMaybeMessage<InfoRequest>(NULL);
  }

  InfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoRequest& from);
  void MergeFrom(const InfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string control_tower = 1;
  void clear_control_tower();
  static const int kControlTowerFieldNumber = 1;
  const ::std::string& control_tower() const;
  void set_control_tower(const ::std::string& value);
  #if LANG_CXX11
  void set_control_tower(::std::string&& value);
  #endif
  void set_control_tower(const char* value);
  void set_control_tower(const char* value, size_t size);
  ::std::string* mutable_control_tower();
  ::std::string* release_control_tower();
  void set_allocated_control_tower(::std::string* control_tower);

  // @@protoc_insertion_point(class_scope:tareadosinfo.InfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr control_tower_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_infocontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareadosinfo.InfoResponse) */ {
 public:
  InfoResponse();
  virtual ~InfoResponse();

  InfoResponse(const InfoResponse& from);

  inline InfoResponse& operator=(const InfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoResponse(InfoResponse&& from) noexcept
    : InfoResponse() {
    *this = ::std::move(from);
  }

  inline InfoResponse& operator=(InfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoResponse* internal_default_instance() {
    return reinterpret_cast<const InfoResponse*>(
               &_InfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(InfoResponse* other);
  friend void swap(InfoResponse& a, InfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoResponse* New() const final {
    return CreateMaybeMessage<InfoResponse>(NULL);
  }

  InfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoResponse& from);
  void MergeFrom(const InfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tareadosinfo.PlaneMsge departurePlane = 1;
  int departureplane_size() const;
  void clear_departureplane();
  static const int kDeparturePlaneFieldNumber = 1;
  ::tareadosinfo::PlaneMsge* mutable_departureplane(int index);
  ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge >*
      mutable_departureplane();
  const ::tareadosinfo::PlaneMsge& departureplane(int index) const;
  ::tareadosinfo::PlaneMsge* add_departureplane();
  const ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge >&
      departureplane() const;

  // repeated .tareadosinfo.PlaneMsge arrivalPlane = 2;
  int arrivalplane_size() const;
  void clear_arrivalplane();
  static const int kArrivalPlaneFieldNumber = 2;
  ::tareadosinfo::PlaneMsge* mutable_arrivalplane(int index);
  ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge >*
      mutable_arrivalplane();
  const ::tareadosinfo::PlaneMsge& arrivalplane(int index) const;
  ::tareadosinfo::PlaneMsge* add_arrivalplane();
  const ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge >&
      arrivalplane() const;

  // string control_tower = 3;
  void clear_control_tower();
  static const int kControlTowerFieldNumber = 3;
  const ::std::string& control_tower() const;
  void set_control_tower(const ::std::string& value);
  #if LANG_CXX11
  void set_control_tower(::std::string&& value);
  #endif
  void set_control_tower(const char* value);
  void set_control_tower(const char* value, size_t size);
  ::std::string* mutable_control_tower();
  ::std::string* release_control_tower();
  void set_allocated_control_tower(::std::string* control_tower);

  // @@protoc_insertion_point(class_scope:tareadosinfo.InfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge > departureplane_;
  ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge > arrivalplane_;
  ::google::protobuf::internal::ArenaStringPtr control_tower_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_infocontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlaneMsge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareadosinfo.PlaneMsge) */ {
 public:
  PlaneMsge();
  virtual ~PlaneMsge();

  PlaneMsge(const PlaneMsge& from);

  inline PlaneMsge& operator=(const PlaneMsge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlaneMsge(PlaneMsge&& from) noexcept
    : PlaneMsge() {
    *this = ::std::move(from);
  }

  inline PlaneMsge& operator=(PlaneMsge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaneMsge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaneMsge* internal_default_instance() {
    return reinterpret_cast<const PlaneMsge*>(
               &_PlaneMsge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlaneMsge* other);
  friend void swap(PlaneMsge& a, PlaneMsge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlaneMsge* New() const final {
    return CreateMaybeMessage<PlaneMsge>(NULL);
  }

  PlaneMsge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlaneMsge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlaneMsge& from);
  void MergeFrom(const PlaneMsge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaneMsge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string airline = 1;
  void clear_airline();
  static const int kAirlineFieldNumber = 1;
  const ::std::string& airline() const;
  void set_airline(const ::std::string& value);
  #if LANG_CXX11
  void set_airline(::std::string&& value);
  #endif
  void set_airline(const char* value);
  void set_airline(const char* value, size_t size);
  ::std::string* mutable_airline();
  ::std::string* release_airline();
  void set_allocated_airline(::std::string* airline);

  // string planeNumber = 2;
  void clear_planenumber();
  static const int kPlaneNumberFieldNumber = 2;
  const ::std::string& planenumber() const;
  void set_planenumber(const ::std::string& value);
  #if LANG_CXX11
  void set_planenumber(::std::string&& value);
  #endif
  void set_planenumber(const char* value);
  void set_planenumber(const char* value, size_t size);
  ::std::string* mutable_planenumber();
  ::std::string* release_planenumber();
  void set_allocated_planenumber(::std::string* planenumber);

  // string sourceAddress = 7;
  void clear_sourceaddress();
  static const int kSourceAddressFieldNumber = 7;
  const ::std::string& sourceaddress() const;
  void set_sourceaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_sourceaddress(::std::string&& value);
  #endif
  void set_sourceaddress(const char* value);
  void set_sourceaddress(const char* value, size_t size);
  ::std::string* mutable_sourceaddress();
  ::std::string* release_sourceaddress();
  void set_allocated_sourceaddress(::std::string* sourceaddress);

  // string destAddress = 8;
  void clear_destaddress();
  static const int kDestAddressFieldNumber = 8;
  const ::std::string& destaddress() const;
  void set_destaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_destaddress(::std::string&& value);
  #endif
  void set_destaddress(const char* value);
  void set_destaddress(const char* value, size_t size);
  ::std::string* mutable_destaddress();
  ::std::string* release_destaddress();
  void set_allocated_destaddress(::std::string* destaddress);

  // int32 maxLoad = 3;
  void clear_maxload();
  static const int kMaxLoadFieldNumber = 3;
  ::google::protobuf::int32 maxload() const;
  void set_maxload(::google::protobuf::int32 value);

  // int32 currLoad = 4;
  void clear_currload();
  static const int kCurrLoadFieldNumber = 4;
  ::google::protobuf::int32 currload() const;
  void set_currload(::google::protobuf::int32 value);

  // int32 maxCapacity = 5;
  void clear_maxcapacity();
  static const int kMaxCapacityFieldNumber = 5;
  ::google::protobuf::int32 maxcapacity() const;
  void set_maxcapacity(::google::protobuf::int32 value);

  // int32 currCapacity = 6;
  void clear_currcapacity();
  static const int kCurrCapacityFieldNumber = 6;
  ::google::protobuf::int32 currcapacity() const;
  void set_currcapacity(::google::protobuf::int32 value);

  // int32 runway = 9;
  void clear_runway();
  static const int kRunwayFieldNumber = 9;
  ::google::protobuf::int32 runway() const;
  void set_runway(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tareadosinfo.PlaneMsge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr airline_;
  ::google::protobuf::internal::ArenaStringPtr planenumber_;
  ::google::protobuf::internal::ArenaStringPtr sourceaddress_;
  ::google::protobuf::internal::ArenaStringPtr destaddress_;
  ::google::protobuf::int32 maxload_;
  ::google::protobuf::int32 currload_;
  ::google::protobuf::int32 maxcapacity_;
  ::google::protobuf::int32 currcapacity_;
  ::google::protobuf::int32 runway_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_infocontrol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InfoRequest

// string control_tower = 1;
inline void InfoRequest::clear_control_tower() {
  control_tower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoRequest::control_tower() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.InfoRequest.control_tower)
  return control_tower_.GetNoArena();
}
inline void InfoRequest::set_control_tower(const ::std::string& value) {
  
  control_tower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareadosinfo.InfoRequest.control_tower)
}
#if LANG_CXX11
inline void InfoRequest::set_control_tower(::std::string&& value) {
  
  control_tower_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareadosinfo.InfoRequest.control_tower)
}
#endif
inline void InfoRequest::set_control_tower(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  control_tower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareadosinfo.InfoRequest.control_tower)
}
inline void InfoRequest::set_control_tower(const char* value, size_t size) {
  
  control_tower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareadosinfo.InfoRequest.control_tower)
}
inline ::std::string* InfoRequest::mutable_control_tower() {
  
  // @@protoc_insertion_point(field_mutable:tareadosinfo.InfoRequest.control_tower)
  return control_tower_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoRequest::release_control_tower() {
  // @@protoc_insertion_point(field_release:tareadosinfo.InfoRequest.control_tower)
  
  return control_tower_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoRequest::set_allocated_control_tower(::std::string* control_tower) {
  if (control_tower != NULL) {
    
  } else {
    
  }
  control_tower_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), control_tower);
  // @@protoc_insertion_point(field_set_allocated:tareadosinfo.InfoRequest.control_tower)
}

// -------------------------------------------------------------------

// InfoResponse

// repeated .tareadosinfo.PlaneMsge departurePlane = 1;
inline int InfoResponse::departureplane_size() const {
  return departureplane_.size();
}
inline void InfoResponse::clear_departureplane() {
  departureplane_.Clear();
}
inline ::tareadosinfo::PlaneMsge* InfoResponse::mutable_departureplane(int index) {
  // @@protoc_insertion_point(field_mutable:tareadosinfo.InfoResponse.departurePlane)
  return departureplane_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge >*
InfoResponse::mutable_departureplane() {
  // @@protoc_insertion_point(field_mutable_list:tareadosinfo.InfoResponse.departurePlane)
  return &departureplane_;
}
inline const ::tareadosinfo::PlaneMsge& InfoResponse::departureplane(int index) const {
  // @@protoc_insertion_point(field_get:tareadosinfo.InfoResponse.departurePlane)
  return departureplane_.Get(index);
}
inline ::tareadosinfo::PlaneMsge* InfoResponse::add_departureplane() {
  // @@protoc_insertion_point(field_add:tareadosinfo.InfoResponse.departurePlane)
  return departureplane_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge >&
InfoResponse::departureplane() const {
  // @@protoc_insertion_point(field_list:tareadosinfo.InfoResponse.departurePlane)
  return departureplane_;
}

// repeated .tareadosinfo.PlaneMsge arrivalPlane = 2;
inline int InfoResponse::arrivalplane_size() const {
  return arrivalplane_.size();
}
inline void InfoResponse::clear_arrivalplane() {
  arrivalplane_.Clear();
}
inline ::tareadosinfo::PlaneMsge* InfoResponse::mutable_arrivalplane(int index) {
  // @@protoc_insertion_point(field_mutable:tareadosinfo.InfoResponse.arrivalPlane)
  return arrivalplane_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge >*
InfoResponse::mutable_arrivalplane() {
  // @@protoc_insertion_point(field_mutable_list:tareadosinfo.InfoResponse.arrivalPlane)
  return &arrivalplane_;
}
inline const ::tareadosinfo::PlaneMsge& InfoResponse::arrivalplane(int index) const {
  // @@protoc_insertion_point(field_get:tareadosinfo.InfoResponse.arrivalPlane)
  return arrivalplane_.Get(index);
}
inline ::tareadosinfo::PlaneMsge* InfoResponse::add_arrivalplane() {
  // @@protoc_insertion_point(field_add:tareadosinfo.InfoResponse.arrivalPlane)
  return arrivalplane_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tareadosinfo::PlaneMsge >&
InfoResponse::arrivalplane() const {
  // @@protoc_insertion_point(field_list:tareadosinfo.InfoResponse.arrivalPlane)
  return arrivalplane_;
}

// string control_tower = 3;
inline void InfoResponse::clear_control_tower() {
  control_tower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoResponse::control_tower() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.InfoResponse.control_tower)
  return control_tower_.GetNoArena();
}
inline void InfoResponse::set_control_tower(const ::std::string& value) {
  
  control_tower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareadosinfo.InfoResponse.control_tower)
}
#if LANG_CXX11
inline void InfoResponse::set_control_tower(::std::string&& value) {
  
  control_tower_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareadosinfo.InfoResponse.control_tower)
}
#endif
inline void InfoResponse::set_control_tower(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  control_tower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareadosinfo.InfoResponse.control_tower)
}
inline void InfoResponse::set_control_tower(const char* value, size_t size) {
  
  control_tower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareadosinfo.InfoResponse.control_tower)
}
inline ::std::string* InfoResponse::mutable_control_tower() {
  
  // @@protoc_insertion_point(field_mutable:tareadosinfo.InfoResponse.control_tower)
  return control_tower_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoResponse::release_control_tower() {
  // @@protoc_insertion_point(field_release:tareadosinfo.InfoResponse.control_tower)
  
  return control_tower_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoResponse::set_allocated_control_tower(::std::string* control_tower) {
  if (control_tower != NULL) {
    
  } else {
    
  }
  control_tower_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), control_tower);
  // @@protoc_insertion_point(field_set_allocated:tareadosinfo.InfoResponse.control_tower)
}

// -------------------------------------------------------------------

// PlaneMsge

// string airline = 1;
inline void PlaneMsge::clear_airline() {
  airline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaneMsge::airline() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.PlaneMsge.airline)
  return airline_.GetNoArena();
}
inline void PlaneMsge::set_airline(const ::std::string& value) {
  
  airline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareadosinfo.PlaneMsge.airline)
}
#if LANG_CXX11
inline void PlaneMsge::set_airline(::std::string&& value) {
  
  airline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareadosinfo.PlaneMsge.airline)
}
#endif
inline void PlaneMsge::set_airline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  airline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareadosinfo.PlaneMsge.airline)
}
inline void PlaneMsge::set_airline(const char* value, size_t size) {
  
  airline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareadosinfo.PlaneMsge.airline)
}
inline ::std::string* PlaneMsge::mutable_airline() {
  
  // @@protoc_insertion_point(field_mutable:tareadosinfo.PlaneMsge.airline)
  return airline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaneMsge::release_airline() {
  // @@protoc_insertion_point(field_release:tareadosinfo.PlaneMsge.airline)
  
  return airline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaneMsge::set_allocated_airline(::std::string* airline) {
  if (airline != NULL) {
    
  } else {
    
  }
  airline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), airline);
  // @@protoc_insertion_point(field_set_allocated:tareadosinfo.PlaneMsge.airline)
}

// string planeNumber = 2;
inline void PlaneMsge::clear_planenumber() {
  planenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaneMsge::planenumber() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.PlaneMsge.planeNumber)
  return planenumber_.GetNoArena();
}
inline void PlaneMsge::set_planenumber(const ::std::string& value) {
  
  planenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareadosinfo.PlaneMsge.planeNumber)
}
#if LANG_CXX11
inline void PlaneMsge::set_planenumber(::std::string&& value) {
  
  planenumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareadosinfo.PlaneMsge.planeNumber)
}
#endif
inline void PlaneMsge::set_planenumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  planenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareadosinfo.PlaneMsge.planeNumber)
}
inline void PlaneMsge::set_planenumber(const char* value, size_t size) {
  
  planenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareadosinfo.PlaneMsge.planeNumber)
}
inline ::std::string* PlaneMsge::mutable_planenumber() {
  
  // @@protoc_insertion_point(field_mutable:tareadosinfo.PlaneMsge.planeNumber)
  return planenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaneMsge::release_planenumber() {
  // @@protoc_insertion_point(field_release:tareadosinfo.PlaneMsge.planeNumber)
  
  return planenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaneMsge::set_allocated_planenumber(::std::string* planenumber) {
  if (planenumber != NULL) {
    
  } else {
    
  }
  planenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planenumber);
  // @@protoc_insertion_point(field_set_allocated:tareadosinfo.PlaneMsge.planeNumber)
}

// int32 maxLoad = 3;
inline void PlaneMsge::clear_maxload() {
  maxload_ = 0;
}
inline ::google::protobuf::int32 PlaneMsge::maxload() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.PlaneMsge.maxLoad)
  return maxload_;
}
inline void PlaneMsge::set_maxload(::google::protobuf::int32 value) {
  
  maxload_ = value;
  // @@protoc_insertion_point(field_set:tareadosinfo.PlaneMsge.maxLoad)
}

// int32 currLoad = 4;
inline void PlaneMsge::clear_currload() {
  currload_ = 0;
}
inline ::google::protobuf::int32 PlaneMsge::currload() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.PlaneMsge.currLoad)
  return currload_;
}
inline void PlaneMsge::set_currload(::google::protobuf::int32 value) {
  
  currload_ = value;
  // @@protoc_insertion_point(field_set:tareadosinfo.PlaneMsge.currLoad)
}

// int32 maxCapacity = 5;
inline void PlaneMsge::clear_maxcapacity() {
  maxcapacity_ = 0;
}
inline ::google::protobuf::int32 PlaneMsge::maxcapacity() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.PlaneMsge.maxCapacity)
  return maxcapacity_;
}
inline void PlaneMsge::set_maxcapacity(::google::protobuf::int32 value) {
  
  maxcapacity_ = value;
  // @@protoc_insertion_point(field_set:tareadosinfo.PlaneMsge.maxCapacity)
}

// int32 currCapacity = 6;
inline void PlaneMsge::clear_currcapacity() {
  currcapacity_ = 0;
}
inline ::google::protobuf::int32 PlaneMsge::currcapacity() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.PlaneMsge.currCapacity)
  return currcapacity_;
}
inline void PlaneMsge::set_currcapacity(::google::protobuf::int32 value) {
  
  currcapacity_ = value;
  // @@protoc_insertion_point(field_set:tareadosinfo.PlaneMsge.currCapacity)
}

// string sourceAddress = 7;
inline void PlaneMsge::clear_sourceaddress() {
  sourceaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaneMsge::sourceaddress() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.PlaneMsge.sourceAddress)
  return sourceaddress_.GetNoArena();
}
inline void PlaneMsge::set_sourceaddress(const ::std::string& value) {
  
  sourceaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareadosinfo.PlaneMsge.sourceAddress)
}
#if LANG_CXX11
inline void PlaneMsge::set_sourceaddress(::std::string&& value) {
  
  sourceaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareadosinfo.PlaneMsge.sourceAddress)
}
#endif
inline void PlaneMsge::set_sourceaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourceaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareadosinfo.PlaneMsge.sourceAddress)
}
inline void PlaneMsge::set_sourceaddress(const char* value, size_t size) {
  
  sourceaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareadosinfo.PlaneMsge.sourceAddress)
}
inline ::std::string* PlaneMsge::mutable_sourceaddress() {
  
  // @@protoc_insertion_point(field_mutable:tareadosinfo.PlaneMsge.sourceAddress)
  return sourceaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaneMsge::release_sourceaddress() {
  // @@protoc_insertion_point(field_release:tareadosinfo.PlaneMsge.sourceAddress)
  
  return sourceaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaneMsge::set_allocated_sourceaddress(::std::string* sourceaddress) {
  if (sourceaddress != NULL) {
    
  } else {
    
  }
  sourceaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceaddress);
  // @@protoc_insertion_point(field_set_allocated:tareadosinfo.PlaneMsge.sourceAddress)
}

// string destAddress = 8;
inline void PlaneMsge::clear_destaddress() {
  destaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaneMsge::destaddress() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.PlaneMsge.destAddress)
  return destaddress_.GetNoArena();
}
inline void PlaneMsge::set_destaddress(const ::std::string& value) {
  
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareadosinfo.PlaneMsge.destAddress)
}
#if LANG_CXX11
inline void PlaneMsge::set_destaddress(::std::string&& value) {
  
  destaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareadosinfo.PlaneMsge.destAddress)
}
#endif
inline void PlaneMsge::set_destaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareadosinfo.PlaneMsge.destAddress)
}
inline void PlaneMsge::set_destaddress(const char* value, size_t size) {
  
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareadosinfo.PlaneMsge.destAddress)
}
inline ::std::string* PlaneMsge::mutable_destaddress() {
  
  // @@protoc_insertion_point(field_mutable:tareadosinfo.PlaneMsge.destAddress)
  return destaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaneMsge::release_destaddress() {
  // @@protoc_insertion_point(field_release:tareadosinfo.PlaneMsge.destAddress)
  
  return destaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaneMsge::set_allocated_destaddress(::std::string* destaddress) {
  if (destaddress != NULL) {
    
  } else {
    
  }
  destaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destaddress);
  // @@protoc_insertion_point(field_set_allocated:tareadosinfo.PlaneMsge.destAddress)
}

// int32 runway = 9;
inline void PlaneMsge::clear_runway() {
  runway_ = 0;
}
inline ::google::protobuf::int32 PlaneMsge::runway() const {
  // @@protoc_insertion_point(field_get:tareadosinfo.PlaneMsge.runway)
  return runway_;
}
inline void PlaneMsge::set_runway(::google::protobuf::int32 value) {
  
  runway_ = value;
  // @@protoc_insertion_point(field_set:tareadosinfo.PlaneMsge.runway)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tareadosinfo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_infocontrol_2eproto
