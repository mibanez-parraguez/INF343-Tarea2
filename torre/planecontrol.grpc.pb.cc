// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: planecontrol.proto

#include "planecontrol.pb.h"
#include "planecontrol.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tareados {

static const char* PlaneControlService_method_names[] = {
  "/tareados.PlaneControlService/Land",
  "/tareados.PlaneControlService/Takeoff",
};

std::unique_ptr< PlaneControlService::Stub> PlaneControlService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlaneControlService::Stub> stub(new PlaneControlService::Stub(channel));
  return stub;
}

PlaneControlService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Land_(PlaneControlService_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Takeoff_(PlaneControlService_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::tareados::LandRequest, ::tareados::LandResponse>* PlaneControlService::Stub::LandRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::tareados::LandRequest, ::tareados::LandResponse>::Create(channel_.get(), rpcmethod_Land_, context);
}

::grpc::ClientAsyncReaderWriter< ::tareados::LandRequest, ::tareados::LandResponse>* PlaneControlService::Stub::AsyncLandRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tareados::LandRequest, ::tareados::LandResponse>::Create(channel_.get(), cq, rpcmethod_Land_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::tareados::LandRequest, ::tareados::LandResponse>* PlaneControlService::Stub::PrepareAsyncLandRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tareados::LandRequest, ::tareados::LandResponse>::Create(channel_.get(), cq, rpcmethod_Land_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::tareados::TakeoffRequest, ::tareados::TakeoffResponse>* PlaneControlService::Stub::TakeoffRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::tareados::TakeoffRequest, ::tareados::TakeoffResponse>::Create(channel_.get(), rpcmethod_Takeoff_, context);
}

::grpc::ClientAsyncReaderWriter< ::tareados::TakeoffRequest, ::tareados::TakeoffResponse>* PlaneControlService::Stub::AsyncTakeoffRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tareados::TakeoffRequest, ::tareados::TakeoffResponse>::Create(channel_.get(), cq, rpcmethod_Takeoff_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::tareados::TakeoffRequest, ::tareados::TakeoffResponse>* PlaneControlService::Stub::PrepareAsyncTakeoffRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::tareados::TakeoffRequest, ::tareados::TakeoffResponse>::Create(channel_.get(), cq, rpcmethod_Takeoff_, context, false, nullptr);
}

PlaneControlService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlaneControlService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PlaneControlService::Service, ::tareados::LandRequest, ::tareados::LandResponse>(
          std::mem_fn(&PlaneControlService::Service::Land), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlaneControlService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PlaneControlService::Service, ::tareados::TakeoffRequest, ::tareados::TakeoffResponse>(
          std::mem_fn(&PlaneControlService::Service::Takeoff), this)));
}

PlaneControlService::Service::~Service() {
}

::grpc::Status PlaneControlService::Service::Land(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tareados::LandResponse, ::tareados::LandRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlaneControlService::Service::Takeoff(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::tareados::TakeoffResponse, ::tareados::TakeoffRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tareados

