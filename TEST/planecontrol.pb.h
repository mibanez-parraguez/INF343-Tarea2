// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planecontrol.proto

#ifndef PROTOBUF_INCLUDED_planecontrol_2eproto
#define PROTOBUF_INCLUDED_planecontrol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_planecontrol_2eproto 

namespace protobuf_planecontrol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_planecontrol_2eproto
namespace tareados {
class InfoRequest;
class InfoRequestDefaultTypeInternal;
extern InfoRequestDefaultTypeInternal _InfoRequest_default_instance_;
class InfoResponse;
class InfoResponseDefaultTypeInternal;
extern InfoResponseDefaultTypeInternal _InfoResponse_default_instance_;
class LandRequest;
class LandRequestDefaultTypeInternal;
extern LandRequestDefaultTypeInternal _LandRequest_default_instance_;
class LandResponse;
class LandResponseDefaultTypeInternal;
extern LandResponseDefaultTypeInternal _LandResponse_default_instance_;
class Plane;
class PlaneDefaultTypeInternal;
extern PlaneDefaultTypeInternal _Plane_default_instance_;
class TakeoffRequest;
class TakeoffRequestDefaultTypeInternal;
extern TakeoffRequestDefaultTypeInternal _TakeoffRequest_default_instance_;
class TakeoffResponse;
class TakeoffResponseDefaultTypeInternal;
extern TakeoffResponseDefaultTypeInternal _TakeoffResponse_default_instance_;
}  // namespace tareados
namespace google {
namespace protobuf {
template<> ::tareados::InfoRequest* Arena::CreateMaybeMessage<::tareados::InfoRequest>(Arena*);
template<> ::tareados::InfoResponse* Arena::CreateMaybeMessage<::tareados::InfoResponse>(Arena*);
template<> ::tareados::LandRequest* Arena::CreateMaybeMessage<::tareados::LandRequest>(Arena*);
template<> ::tareados::LandResponse* Arena::CreateMaybeMessage<::tareados::LandResponse>(Arena*);
template<> ::tareados::Plane* Arena::CreateMaybeMessage<::tareados::Plane>(Arena*);
template<> ::tareados::TakeoffRequest* Arena::CreateMaybeMessage<::tareados::TakeoffRequest>(Arena*);
template<> ::tareados::TakeoffResponse* Arena::CreateMaybeMessage<::tareados::TakeoffResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tareados {

// ===================================================================

class LandRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareados.LandRequest) */ {
 public:
  LandRequest();
  virtual ~LandRequest();

  LandRequest(const LandRequest& from);

  inline LandRequest& operator=(const LandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LandRequest(LandRequest&& from) noexcept
    : LandRequest() {
    *this = ::std::move(from);
  }

  inline LandRequest& operator=(LandRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandRequest* internal_default_instance() {
    return reinterpret_cast<const LandRequest*>(
               &_LandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LandRequest* other);
  friend void swap(LandRequest& a, LandRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LandRequest* New() const final {
    return CreateMaybeMessage<LandRequest>(NULL);
  }

  LandRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LandRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LandRequest& from);
  void MergeFrom(const LandRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dest = 1;
  void clear_dest();
  static const int kDestFieldNumber = 1;
  const ::std::string& dest() const;
  void set_dest(const ::std::string& value);
  #if LANG_CXX11
  void set_dest(::std::string&& value);
  #endif
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  ::std::string* mutable_dest();
  ::std::string* release_dest();
  void set_allocated_dest(::std::string* dest);

  // .tareados.Plane plane = 2;
  bool has_plane() const;
  void clear_plane();
  static const int kPlaneFieldNumber = 2;
  private:
  const ::tareados::Plane& _internal_plane() const;
  public:
  const ::tareados::Plane& plane() const;
  ::tareados::Plane* release_plane();
  ::tareados::Plane* mutable_plane();
  void set_allocated_plane(::tareados::Plane* plane);

  // @@protoc_insertion_point(class_scope:tareados.LandRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dest_;
  ::tareados::Plane* plane_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LandResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareados.LandResponse) */ {
 public:
  LandResponse();
  virtual ~LandResponse();

  LandResponse(const LandResponse& from);

  inline LandResponse& operator=(const LandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LandResponse(LandResponse&& from) noexcept
    : LandResponse() {
    *this = ::std::move(from);
  }

  inline LandResponse& operator=(LandResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandResponse* internal_default_instance() {
    return reinterpret_cast<const LandResponse*>(
               &_LandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LandResponse* other);
  friend void swap(LandResponse& a, LandResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LandResponse* New() const final {
    return CreateMaybeMessage<LandResponse>(NULL);
  }

  LandResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LandResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LandResponse& from);
  void MergeFrom(const LandResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 runway = 1;
  void clear_runway();
  static const int kRunwayFieldNumber = 1;
  ::google::protobuf::int32 runway() const;
  void set_runway(::google::protobuf::int32 value);

  // int32 queue = 2;
  void clear_queue();
  static const int kQueueFieldNumber = 2;
  ::google::protobuf::int32 queue() const;
  void set_queue(::google::protobuf::int32 value);

  // int32 altitude = 3;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  ::google::protobuf::int32 altitude() const;
  void set_altitude(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tareados.LandResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 runway_;
  ::google::protobuf::int32 queue_;
  ::google::protobuf::int32 altitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeoffRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareados.TakeoffRequest) */ {
 public:
  TakeoffRequest();
  virtual ~TakeoffRequest();

  TakeoffRequest(const TakeoffRequest& from);

  inline TakeoffRequest& operator=(const TakeoffRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeoffRequest(TakeoffRequest&& from) noexcept
    : TakeoffRequest() {
    *this = ::std::move(from);
  }

  inline TakeoffRequest& operator=(TakeoffRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeoffRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakeoffRequest* internal_default_instance() {
    return reinterpret_cast<const TakeoffRequest*>(
               &_TakeoffRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TakeoffRequest* other);
  friend void swap(TakeoffRequest& a, TakeoffRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeoffRequest* New() const final {
    return CreateMaybeMessage<TakeoffRequest>(NULL);
  }

  TakeoffRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TakeoffRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TakeoffRequest& from);
  void MergeFrom(const TakeoffRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakeoffRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dest = 2;
  void clear_dest();
  static const int kDestFieldNumber = 2;
  const ::std::string& dest() const;
  void set_dest(const ::std::string& value);
  #if LANG_CXX11
  void set_dest(::std::string&& value);
  #endif
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  ::std::string* mutable_dest();
  ::std::string* release_dest();
  void set_allocated_dest(::std::string* dest);

  // .tareados.Plane plane = 1;
  bool has_plane() const;
  void clear_plane();
  static const int kPlaneFieldNumber = 1;
  private:
  const ::tareados::Plane& _internal_plane() const;
  public:
  const ::tareados::Plane& plane() const;
  ::tareados::Plane* release_plane();
  ::tareados::Plane* mutable_plane();
  void set_allocated_plane(::tareados::Plane* plane);

  // bool instOK = 3;
  void clear_instok();
  static const int kInstOKFieldNumber = 3;
  bool instok() const;
  void set_instok(bool value);

  // @@protoc_insertion_point(class_scope:tareados.TakeoffRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dest_;
  ::tareados::Plane* plane_;
  bool instok_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TakeoffResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareados.TakeoffResponse) */ {
 public:
  TakeoffResponse();
  virtual ~TakeoffResponse();

  TakeoffResponse(const TakeoffResponse& from);

  inline TakeoffResponse& operator=(const TakeoffResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TakeoffResponse(TakeoffResponse&& from) noexcept
    : TakeoffResponse() {
    *this = ::std::move(from);
  }

  inline TakeoffResponse& operator=(TakeoffResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeoffResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TakeoffResponse* internal_default_instance() {
    return reinterpret_cast<const TakeoffResponse*>(
               &_TakeoffResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TakeoffResponse* other);
  friend void swap(TakeoffResponse& a, TakeoffResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TakeoffResponse* New() const final {
    return CreateMaybeMessage<TakeoffResponse>(NULL);
  }

  TakeoffResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TakeoffResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TakeoffResponse& from);
  void MergeFrom(const TakeoffResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TakeoffResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dest = 3;
  void clear_dest();
  static const int kDestFieldNumber = 3;
  const ::std::string& dest() const;
  void set_dest(const ::std::string& value);
  #if LANG_CXX11
  void set_dest(::std::string&& value);
  #endif
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  ::std::string* mutable_dest();
  ::std::string* release_dest();
  void set_allocated_dest(::std::string* dest);

  // string prevPlane = 5;
  void clear_prevplane();
  static const int kPrevPlaneFieldNumber = 5;
  const ::std::string& prevplane() const;
  void set_prevplane(const ::std::string& value);
  #if LANG_CXX11
  void set_prevplane(::std::string&& value);
  #endif
  void set_prevplane(const char* value);
  void set_prevplane(const char* value, size_t size);
  ::std::string* mutable_prevplane();
  ::std::string* release_prevplane();
  void set_allocated_prevplane(::std::string* prevplane);

  // int32 altitude = 1;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 1;
  ::google::protobuf::int32 altitude() const;
  void set_altitude(::google::protobuf::int32 value);

  // int32 runway = 2;
  void clear_runway();
  static const int kRunwayFieldNumber = 2;
  ::google::protobuf::int32 runway() const;
  void set_runway(::google::protobuf::int32 value);

  // int32 queuePos = 4;
  void clear_queuepos();
  static const int kQueuePosFieldNumber = 4;
  ::google::protobuf::int32 queuepos() const;
  void set_queuepos(::google::protobuf::int32 value);

  // bool destOK = 6;
  void clear_destok();
  static const int kDestOKFieldNumber = 6;
  bool destok() const;
  void set_destok(bool value);

  // bool restrOK = 7;
  void clear_restrok();
  static const int kRestrOKFieldNumber = 7;
  bool restrok() const;
  void set_restrok(bool value);

  // bool instOK = 8;
  void clear_instok();
  static const int kInstOKFieldNumber = 8;
  bool instok() const;
  void set_instok(bool value);

  // @@protoc_insertion_point(class_scope:tareados.TakeoffResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dest_;
  ::google::protobuf::internal::ArenaStringPtr prevplane_;
  ::google::protobuf::int32 altitude_;
  ::google::protobuf::int32 runway_;
  ::google::protobuf::int32 queuepos_;
  bool destok_;
  bool restrok_;
  bool instok_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareados.InfoRequest) */ {
 public:
  InfoRequest();
  virtual ~InfoRequest();

  InfoRequest(const InfoRequest& from);

  inline InfoRequest& operator=(const InfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoRequest(InfoRequest&& from) noexcept
    : InfoRequest() {
    *this = ::std::move(from);
  }

  inline InfoRequest& operator=(InfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoRequest* internal_default_instance() {
    return reinterpret_cast<const InfoRequest*>(
               &_InfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InfoRequest* other);
  friend void swap(InfoRequest& a, InfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoRequest* New() const final {
    return CreateMaybeMessage<InfoRequest>(NULL);
  }

  InfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoRequest& from);
  void MergeFrom(const InfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string controlTower = 1;
  void clear_controltower();
  static const int kControlTowerFieldNumber = 1;
  const ::std::string& controltower() const;
  void set_controltower(const ::std::string& value);
  #if LANG_CXX11
  void set_controltower(::std::string&& value);
  #endif
  void set_controltower(const char* value);
  void set_controltower(const char* value, size_t size);
  ::std::string* mutable_controltower();
  ::std::string* release_controltower();
  void set_allocated_controltower(::std::string* controltower);

  // @@protoc_insertion_point(class_scope:tareados.InfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr controltower_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareados.InfoResponse) */ {
 public:
  InfoResponse();
  virtual ~InfoResponse();

  InfoResponse(const InfoResponse& from);

  inline InfoResponse& operator=(const InfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfoResponse(InfoResponse&& from) noexcept
    : InfoResponse() {
    *this = ::std::move(from);
  }

  inline InfoResponse& operator=(InfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfoResponse* internal_default_instance() {
    return reinterpret_cast<const InfoResponse*>(
               &_InfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InfoResponse* other);
  friend void swap(InfoResponse& a, InfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfoResponse* New() const final {
    return CreateMaybeMessage<InfoResponse>(NULL);
  }

  InfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfoResponse& from);
  void MergeFrom(const InfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tareados.Plane departurePlane = 1;
  int departureplane_size() const;
  void clear_departureplane();
  static const int kDeparturePlaneFieldNumber = 1;
  ::tareados::Plane* mutable_departureplane(int index);
  ::google::protobuf::RepeatedPtrField< ::tareados::Plane >*
      mutable_departureplane();
  const ::tareados::Plane& departureplane(int index) const;
  ::tareados::Plane* add_departureplane();
  const ::google::protobuf::RepeatedPtrField< ::tareados::Plane >&
      departureplane() const;

  // repeated .tareados.Plane arrivalPlane = 2;
  int arrivalplane_size() const;
  void clear_arrivalplane();
  static const int kArrivalPlaneFieldNumber = 2;
  ::tareados::Plane* mutable_arrivalplane(int index);
  ::google::protobuf::RepeatedPtrField< ::tareados::Plane >*
      mutable_arrivalplane();
  const ::tareados::Plane& arrivalplane(int index) const;
  ::tareados::Plane* add_arrivalplane();
  const ::google::protobuf::RepeatedPtrField< ::tareados::Plane >&
      arrivalplane() const;

  // @@protoc_insertion_point(class_scope:tareados.InfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tareados::Plane > departureplane_;
  ::google::protobuf::RepeatedPtrField< ::tareados::Plane > arrivalplane_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planecontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Plane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tareados.Plane) */ {
 public:
  Plane();
  virtual ~Plane();

  Plane(const Plane& from);

  inline Plane& operator=(const Plane& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Plane(Plane&& from) noexcept
    : Plane() {
    *this = ::std::move(from);
  }

  inline Plane& operator=(Plane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Plane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Plane* internal_default_instance() {
    return reinterpret_cast<const Plane*>(
               &_Plane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Plane* other);
  friend void swap(Plane& a, Plane& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Plane* New() const final {
    return CreateMaybeMessage<Plane>(NULL);
  }

  Plane* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Plane>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Plane& from);
  void MergeFrom(const Plane& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string airline = 1;
  void clear_airline();
  static const int kAirlineFieldNumber = 1;
  const ::std::string& airline() const;
  void set_airline(const ::std::string& value);
  #if LANG_CXX11
  void set_airline(::std::string&& value);
  #endif
  void set_airline(const char* value);
  void set_airline(const char* value, size_t size);
  ::std::string* mutable_airline();
  ::std::string* release_airline();
  void set_allocated_airline(::std::string* airline);

  // string planeNumber = 2;
  void clear_planenumber();
  static const int kPlaneNumberFieldNumber = 2;
  const ::std::string& planenumber() const;
  void set_planenumber(const ::std::string& value);
  #if LANG_CXX11
  void set_planenumber(::std::string&& value);
  #endif
  void set_planenumber(const char* value);
  void set_planenumber(const char* value, size_t size);
  ::std::string* mutable_planenumber();
  ::std::string* release_planenumber();
  void set_allocated_planenumber(::std::string* planenumber);

  // string sourceAddress = 7;
  void clear_sourceaddress();
  static const int kSourceAddressFieldNumber = 7;
  const ::std::string& sourceaddress() const;
  void set_sourceaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_sourceaddress(::std::string&& value);
  #endif
  void set_sourceaddress(const char* value);
  void set_sourceaddress(const char* value, size_t size);
  ::std::string* mutable_sourceaddress();
  ::std::string* release_sourceaddress();
  void set_allocated_sourceaddress(::std::string* sourceaddress);

  // string destAddress = 8;
  void clear_destaddress();
  static const int kDestAddressFieldNumber = 8;
  const ::std::string& destaddress() const;
  void set_destaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_destaddress(::std::string&& value);
  #endif
  void set_destaddress(const char* value);
  void set_destaddress(const char* value, size_t size);
  ::std::string* mutable_destaddress();
  ::std::string* release_destaddress();
  void set_allocated_destaddress(::std::string* destaddress);

  // int32 maxLoad = 3;
  void clear_maxload();
  static const int kMaxLoadFieldNumber = 3;
  ::google::protobuf::int32 maxload() const;
  void set_maxload(::google::protobuf::int32 value);

  // int32 currLoad = 4;
  void clear_currload();
  static const int kCurrLoadFieldNumber = 4;
  ::google::protobuf::int32 currload() const;
  void set_currload(::google::protobuf::int32 value);

  // int32 maxCapacity = 5;
  void clear_maxcapacity();
  static const int kMaxCapacityFieldNumber = 5;
  ::google::protobuf::int32 maxcapacity() const;
  void set_maxcapacity(::google::protobuf::int32 value);

  // int32 currCapacity = 6;
  void clear_currcapacity();
  static const int kCurrCapacityFieldNumber = 6;
  ::google::protobuf::int32 currcapacity() const;
  void set_currcapacity(::google::protobuf::int32 value);

  // int32 runway = 9;
  void clear_runway();
  static const int kRunwayFieldNumber = 9;
  ::google::protobuf::int32 runway() const;
  void set_runway(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tareados.Plane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr airline_;
  ::google::protobuf::internal::ArenaStringPtr planenumber_;
  ::google::protobuf::internal::ArenaStringPtr sourceaddress_;
  ::google::protobuf::internal::ArenaStringPtr destaddress_;
  ::google::protobuf::int32 maxload_;
  ::google::protobuf::int32 currload_;
  ::google::protobuf::int32 maxcapacity_;
  ::google::protobuf::int32 currcapacity_;
  ::google::protobuf::int32 runway_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_planecontrol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LandRequest

// string dest = 1;
inline void LandRequest::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LandRequest::dest() const {
  // @@protoc_insertion_point(field_get:tareados.LandRequest.dest)
  return dest_.GetNoArena();
}
inline void LandRequest::set_dest(const ::std::string& value) {
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareados.LandRequest.dest)
}
#if LANG_CXX11
inline void LandRequest::set_dest(::std::string&& value) {
  
  dest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareados.LandRequest.dest)
}
#endif
inline void LandRequest::set_dest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareados.LandRequest.dest)
}
inline void LandRequest::set_dest(const char* value, size_t size) {
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareados.LandRequest.dest)
}
inline ::std::string* LandRequest::mutable_dest() {
  
  // @@protoc_insertion_point(field_mutable:tareados.LandRequest.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LandRequest::release_dest() {
  // @@protoc_insertion_point(field_release:tareados.LandRequest.dest)
  
  return dest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LandRequest::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    
  } else {
    
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:tareados.LandRequest.dest)
}

// .tareados.Plane plane = 2;
inline bool LandRequest::has_plane() const {
  return this != internal_default_instance() && plane_ != NULL;
}
inline void LandRequest::clear_plane() {
  if (GetArenaNoVirtual() == NULL && plane_ != NULL) {
    delete plane_;
  }
  plane_ = NULL;
}
inline const ::tareados::Plane& LandRequest::_internal_plane() const {
  return *plane_;
}
inline const ::tareados::Plane& LandRequest::plane() const {
  const ::tareados::Plane* p = plane_;
  // @@protoc_insertion_point(field_get:tareados.LandRequest.plane)
  return p != NULL ? *p : *reinterpret_cast<const ::tareados::Plane*>(
      &::tareados::_Plane_default_instance_);
}
inline ::tareados::Plane* LandRequest::release_plane() {
  // @@protoc_insertion_point(field_release:tareados.LandRequest.plane)
  
  ::tareados::Plane* temp = plane_;
  plane_ = NULL;
  return temp;
}
inline ::tareados::Plane* LandRequest::mutable_plane() {
  
  if (plane_ == NULL) {
    auto* p = CreateMaybeMessage<::tareados::Plane>(GetArenaNoVirtual());
    plane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tareados.LandRequest.plane)
  return plane_;
}
inline void LandRequest::set_allocated_plane(::tareados::Plane* plane) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete plane_;
  }
  if (plane) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plane = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plane, submessage_arena);
    }
    
  } else {
    
  }
  plane_ = plane;
  // @@protoc_insertion_point(field_set_allocated:tareados.LandRequest.plane)
}

// -------------------------------------------------------------------

// LandResponse

// int32 runway = 1;
inline void LandResponse::clear_runway() {
  runway_ = 0;
}
inline ::google::protobuf::int32 LandResponse::runway() const {
  // @@protoc_insertion_point(field_get:tareados.LandResponse.runway)
  return runway_;
}
inline void LandResponse::set_runway(::google::protobuf::int32 value) {
  
  runway_ = value;
  // @@protoc_insertion_point(field_set:tareados.LandResponse.runway)
}

// int32 queue = 2;
inline void LandResponse::clear_queue() {
  queue_ = 0;
}
inline ::google::protobuf::int32 LandResponse::queue() const {
  // @@protoc_insertion_point(field_get:tareados.LandResponse.queue)
  return queue_;
}
inline void LandResponse::set_queue(::google::protobuf::int32 value) {
  
  queue_ = value;
  // @@protoc_insertion_point(field_set:tareados.LandResponse.queue)
}

// int32 altitude = 3;
inline void LandResponse::clear_altitude() {
  altitude_ = 0;
}
inline ::google::protobuf::int32 LandResponse::altitude() const {
  // @@protoc_insertion_point(field_get:tareados.LandResponse.altitude)
  return altitude_;
}
inline void LandResponse::set_altitude(::google::protobuf::int32 value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:tareados.LandResponse.altitude)
}

// -------------------------------------------------------------------

// TakeoffRequest

// .tareados.Plane plane = 1;
inline bool TakeoffRequest::has_plane() const {
  return this != internal_default_instance() && plane_ != NULL;
}
inline void TakeoffRequest::clear_plane() {
  if (GetArenaNoVirtual() == NULL && plane_ != NULL) {
    delete plane_;
  }
  plane_ = NULL;
}
inline const ::tareados::Plane& TakeoffRequest::_internal_plane() const {
  return *plane_;
}
inline const ::tareados::Plane& TakeoffRequest::plane() const {
  const ::tareados::Plane* p = plane_;
  // @@protoc_insertion_point(field_get:tareados.TakeoffRequest.plane)
  return p != NULL ? *p : *reinterpret_cast<const ::tareados::Plane*>(
      &::tareados::_Plane_default_instance_);
}
inline ::tareados::Plane* TakeoffRequest::release_plane() {
  // @@protoc_insertion_point(field_release:tareados.TakeoffRequest.plane)
  
  ::tareados::Plane* temp = plane_;
  plane_ = NULL;
  return temp;
}
inline ::tareados::Plane* TakeoffRequest::mutable_plane() {
  
  if (plane_ == NULL) {
    auto* p = CreateMaybeMessage<::tareados::Plane>(GetArenaNoVirtual());
    plane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tareados.TakeoffRequest.plane)
  return plane_;
}
inline void TakeoffRequest::set_allocated_plane(::tareados::Plane* plane) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete plane_;
  }
  if (plane) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      plane = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, plane, submessage_arena);
    }
    
  } else {
    
  }
  plane_ = plane;
  // @@protoc_insertion_point(field_set_allocated:tareados.TakeoffRequest.plane)
}

// string dest = 2;
inline void TakeoffRequest::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TakeoffRequest::dest() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffRequest.dest)
  return dest_.GetNoArena();
}
inline void TakeoffRequest::set_dest(const ::std::string& value) {
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareados.TakeoffRequest.dest)
}
#if LANG_CXX11
inline void TakeoffRequest::set_dest(::std::string&& value) {
  
  dest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareados.TakeoffRequest.dest)
}
#endif
inline void TakeoffRequest::set_dest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareados.TakeoffRequest.dest)
}
inline void TakeoffRequest::set_dest(const char* value, size_t size) {
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareados.TakeoffRequest.dest)
}
inline ::std::string* TakeoffRequest::mutable_dest() {
  
  // @@protoc_insertion_point(field_mutable:tareados.TakeoffRequest.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TakeoffRequest::release_dest() {
  // @@protoc_insertion_point(field_release:tareados.TakeoffRequest.dest)
  
  return dest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TakeoffRequest::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    
  } else {
    
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:tareados.TakeoffRequest.dest)
}

// bool instOK = 3;
inline void TakeoffRequest::clear_instok() {
  instok_ = false;
}
inline bool TakeoffRequest::instok() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffRequest.instOK)
  return instok_;
}
inline void TakeoffRequest::set_instok(bool value) {
  
  instok_ = value;
  // @@protoc_insertion_point(field_set:tareados.TakeoffRequest.instOK)
}

// -------------------------------------------------------------------

// TakeoffResponse

// int32 altitude = 1;
inline void TakeoffResponse::clear_altitude() {
  altitude_ = 0;
}
inline ::google::protobuf::int32 TakeoffResponse::altitude() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffResponse.altitude)
  return altitude_;
}
inline void TakeoffResponse::set_altitude(::google::protobuf::int32 value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:tareados.TakeoffResponse.altitude)
}

// int32 runway = 2;
inline void TakeoffResponse::clear_runway() {
  runway_ = 0;
}
inline ::google::protobuf::int32 TakeoffResponse::runway() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffResponse.runway)
  return runway_;
}
inline void TakeoffResponse::set_runway(::google::protobuf::int32 value) {
  
  runway_ = value;
  // @@protoc_insertion_point(field_set:tareados.TakeoffResponse.runway)
}

// string dest = 3;
inline void TakeoffResponse::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TakeoffResponse::dest() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffResponse.dest)
  return dest_.GetNoArena();
}
inline void TakeoffResponse::set_dest(const ::std::string& value) {
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareados.TakeoffResponse.dest)
}
#if LANG_CXX11
inline void TakeoffResponse::set_dest(::std::string&& value) {
  
  dest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareados.TakeoffResponse.dest)
}
#endif
inline void TakeoffResponse::set_dest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareados.TakeoffResponse.dest)
}
inline void TakeoffResponse::set_dest(const char* value, size_t size) {
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareados.TakeoffResponse.dest)
}
inline ::std::string* TakeoffResponse::mutable_dest() {
  
  // @@protoc_insertion_point(field_mutable:tareados.TakeoffResponse.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TakeoffResponse::release_dest() {
  // @@protoc_insertion_point(field_release:tareados.TakeoffResponse.dest)
  
  return dest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TakeoffResponse::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    
  } else {
    
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:tareados.TakeoffResponse.dest)
}

// int32 queuePos = 4;
inline void TakeoffResponse::clear_queuepos() {
  queuepos_ = 0;
}
inline ::google::protobuf::int32 TakeoffResponse::queuepos() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffResponse.queuePos)
  return queuepos_;
}
inline void TakeoffResponse::set_queuepos(::google::protobuf::int32 value) {
  
  queuepos_ = value;
  // @@protoc_insertion_point(field_set:tareados.TakeoffResponse.queuePos)
}

// string prevPlane = 5;
inline void TakeoffResponse::clear_prevplane() {
  prevplane_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TakeoffResponse::prevplane() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffResponse.prevPlane)
  return prevplane_.GetNoArena();
}
inline void TakeoffResponse::set_prevplane(const ::std::string& value) {
  
  prevplane_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareados.TakeoffResponse.prevPlane)
}
#if LANG_CXX11
inline void TakeoffResponse::set_prevplane(::std::string&& value) {
  
  prevplane_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareados.TakeoffResponse.prevPlane)
}
#endif
inline void TakeoffResponse::set_prevplane(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  prevplane_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareados.TakeoffResponse.prevPlane)
}
inline void TakeoffResponse::set_prevplane(const char* value, size_t size) {
  
  prevplane_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareados.TakeoffResponse.prevPlane)
}
inline ::std::string* TakeoffResponse::mutable_prevplane() {
  
  // @@protoc_insertion_point(field_mutable:tareados.TakeoffResponse.prevPlane)
  return prevplane_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TakeoffResponse::release_prevplane() {
  // @@protoc_insertion_point(field_release:tareados.TakeoffResponse.prevPlane)
  
  return prevplane_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TakeoffResponse::set_allocated_prevplane(::std::string* prevplane) {
  if (prevplane != NULL) {
    
  } else {
    
  }
  prevplane_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prevplane);
  // @@protoc_insertion_point(field_set_allocated:tareados.TakeoffResponse.prevPlane)
}

// bool destOK = 6;
inline void TakeoffResponse::clear_destok() {
  destok_ = false;
}
inline bool TakeoffResponse::destok() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffResponse.destOK)
  return destok_;
}
inline void TakeoffResponse::set_destok(bool value) {
  
  destok_ = value;
  // @@protoc_insertion_point(field_set:tareados.TakeoffResponse.destOK)
}

// bool restrOK = 7;
inline void TakeoffResponse::clear_restrok() {
  restrok_ = false;
}
inline bool TakeoffResponse::restrok() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffResponse.restrOK)
  return restrok_;
}
inline void TakeoffResponse::set_restrok(bool value) {
  
  restrok_ = value;
  // @@protoc_insertion_point(field_set:tareados.TakeoffResponse.restrOK)
}

// bool instOK = 8;
inline void TakeoffResponse::clear_instok() {
  instok_ = false;
}
inline bool TakeoffResponse::instok() const {
  // @@protoc_insertion_point(field_get:tareados.TakeoffResponse.instOK)
  return instok_;
}
inline void TakeoffResponse::set_instok(bool value) {
  
  instok_ = value;
  // @@protoc_insertion_point(field_set:tareados.TakeoffResponse.instOK)
}

// -------------------------------------------------------------------

// InfoRequest

// string controlTower = 1;
inline void InfoRequest::clear_controltower() {
  controltower_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InfoRequest::controltower() const {
  // @@protoc_insertion_point(field_get:tareados.InfoRequest.controlTower)
  return controltower_.GetNoArena();
}
inline void InfoRequest::set_controltower(const ::std::string& value) {
  
  controltower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareados.InfoRequest.controlTower)
}
#if LANG_CXX11
inline void InfoRequest::set_controltower(::std::string&& value) {
  
  controltower_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareados.InfoRequest.controlTower)
}
#endif
inline void InfoRequest::set_controltower(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  controltower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareados.InfoRequest.controlTower)
}
inline void InfoRequest::set_controltower(const char* value, size_t size) {
  
  controltower_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareados.InfoRequest.controlTower)
}
inline ::std::string* InfoRequest::mutable_controltower() {
  
  // @@protoc_insertion_point(field_mutable:tareados.InfoRequest.controlTower)
  return controltower_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfoRequest::release_controltower() {
  // @@protoc_insertion_point(field_release:tareados.InfoRequest.controlTower)
  
  return controltower_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfoRequest::set_allocated_controltower(::std::string* controltower) {
  if (controltower != NULL) {
    
  } else {
    
  }
  controltower_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controltower);
  // @@protoc_insertion_point(field_set_allocated:tareados.InfoRequest.controlTower)
}

// -------------------------------------------------------------------

// InfoResponse

// repeated .tareados.Plane departurePlane = 1;
inline int InfoResponse::departureplane_size() const {
  return departureplane_.size();
}
inline void InfoResponse::clear_departureplane() {
  departureplane_.Clear();
}
inline ::tareados::Plane* InfoResponse::mutable_departureplane(int index) {
  // @@protoc_insertion_point(field_mutable:tareados.InfoResponse.departurePlane)
  return departureplane_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tareados::Plane >*
InfoResponse::mutable_departureplane() {
  // @@protoc_insertion_point(field_mutable_list:tareados.InfoResponse.departurePlane)
  return &departureplane_;
}
inline const ::tareados::Plane& InfoResponse::departureplane(int index) const {
  // @@protoc_insertion_point(field_get:tareados.InfoResponse.departurePlane)
  return departureplane_.Get(index);
}
inline ::tareados::Plane* InfoResponse::add_departureplane() {
  // @@protoc_insertion_point(field_add:tareados.InfoResponse.departurePlane)
  return departureplane_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tareados::Plane >&
InfoResponse::departureplane() const {
  // @@protoc_insertion_point(field_list:tareados.InfoResponse.departurePlane)
  return departureplane_;
}

// repeated .tareados.Plane arrivalPlane = 2;
inline int InfoResponse::arrivalplane_size() const {
  return arrivalplane_.size();
}
inline void InfoResponse::clear_arrivalplane() {
  arrivalplane_.Clear();
}
inline ::tareados::Plane* InfoResponse::mutable_arrivalplane(int index) {
  // @@protoc_insertion_point(field_mutable:tareados.InfoResponse.arrivalPlane)
  return arrivalplane_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tareados::Plane >*
InfoResponse::mutable_arrivalplane() {
  // @@protoc_insertion_point(field_mutable_list:tareados.InfoResponse.arrivalPlane)
  return &arrivalplane_;
}
inline const ::tareados::Plane& InfoResponse::arrivalplane(int index) const {
  // @@protoc_insertion_point(field_get:tareados.InfoResponse.arrivalPlane)
  return arrivalplane_.Get(index);
}
inline ::tareados::Plane* InfoResponse::add_arrivalplane() {
  // @@protoc_insertion_point(field_add:tareados.InfoResponse.arrivalPlane)
  return arrivalplane_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tareados::Plane >&
InfoResponse::arrivalplane() const {
  // @@protoc_insertion_point(field_list:tareados.InfoResponse.arrivalPlane)
  return arrivalplane_;
}

// -------------------------------------------------------------------

// Plane

// string airline = 1;
inline void Plane::clear_airline() {
  airline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plane::airline() const {
  // @@protoc_insertion_point(field_get:tareados.Plane.airline)
  return airline_.GetNoArena();
}
inline void Plane::set_airline(const ::std::string& value) {
  
  airline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareados.Plane.airline)
}
#if LANG_CXX11
inline void Plane::set_airline(::std::string&& value) {
  
  airline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareados.Plane.airline)
}
#endif
inline void Plane::set_airline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  airline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareados.Plane.airline)
}
inline void Plane::set_airline(const char* value, size_t size) {
  
  airline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareados.Plane.airline)
}
inline ::std::string* Plane::mutable_airline() {
  
  // @@protoc_insertion_point(field_mutable:tareados.Plane.airline)
  return airline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plane::release_airline() {
  // @@protoc_insertion_point(field_release:tareados.Plane.airline)
  
  return airline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plane::set_allocated_airline(::std::string* airline) {
  if (airline != NULL) {
    
  } else {
    
  }
  airline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), airline);
  // @@protoc_insertion_point(field_set_allocated:tareados.Plane.airline)
}

// string planeNumber = 2;
inline void Plane::clear_planenumber() {
  planenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plane::planenumber() const {
  // @@protoc_insertion_point(field_get:tareados.Plane.planeNumber)
  return planenumber_.GetNoArena();
}
inline void Plane::set_planenumber(const ::std::string& value) {
  
  planenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareados.Plane.planeNumber)
}
#if LANG_CXX11
inline void Plane::set_planenumber(::std::string&& value) {
  
  planenumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareados.Plane.planeNumber)
}
#endif
inline void Plane::set_planenumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  planenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareados.Plane.planeNumber)
}
inline void Plane::set_planenumber(const char* value, size_t size) {
  
  planenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareados.Plane.planeNumber)
}
inline ::std::string* Plane::mutable_planenumber() {
  
  // @@protoc_insertion_point(field_mutable:tareados.Plane.planeNumber)
  return planenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plane::release_planenumber() {
  // @@protoc_insertion_point(field_release:tareados.Plane.planeNumber)
  
  return planenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plane::set_allocated_planenumber(::std::string* planenumber) {
  if (planenumber != NULL) {
    
  } else {
    
  }
  planenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planenumber);
  // @@protoc_insertion_point(field_set_allocated:tareados.Plane.planeNumber)
}

// int32 maxLoad = 3;
inline void Plane::clear_maxload() {
  maxload_ = 0;
}
inline ::google::protobuf::int32 Plane::maxload() const {
  // @@protoc_insertion_point(field_get:tareados.Plane.maxLoad)
  return maxload_;
}
inline void Plane::set_maxload(::google::protobuf::int32 value) {
  
  maxload_ = value;
  // @@protoc_insertion_point(field_set:tareados.Plane.maxLoad)
}

// int32 currLoad = 4;
inline void Plane::clear_currload() {
  currload_ = 0;
}
inline ::google::protobuf::int32 Plane::currload() const {
  // @@protoc_insertion_point(field_get:tareados.Plane.currLoad)
  return currload_;
}
inline void Plane::set_currload(::google::protobuf::int32 value) {
  
  currload_ = value;
  // @@protoc_insertion_point(field_set:tareados.Plane.currLoad)
}

// int32 maxCapacity = 5;
inline void Plane::clear_maxcapacity() {
  maxcapacity_ = 0;
}
inline ::google::protobuf::int32 Plane::maxcapacity() const {
  // @@protoc_insertion_point(field_get:tareados.Plane.maxCapacity)
  return maxcapacity_;
}
inline void Plane::set_maxcapacity(::google::protobuf::int32 value) {
  
  maxcapacity_ = value;
  // @@protoc_insertion_point(field_set:tareados.Plane.maxCapacity)
}

// int32 currCapacity = 6;
inline void Plane::clear_currcapacity() {
  currcapacity_ = 0;
}
inline ::google::protobuf::int32 Plane::currcapacity() const {
  // @@protoc_insertion_point(field_get:tareados.Plane.currCapacity)
  return currcapacity_;
}
inline void Plane::set_currcapacity(::google::protobuf::int32 value) {
  
  currcapacity_ = value;
  // @@protoc_insertion_point(field_set:tareados.Plane.currCapacity)
}

// string sourceAddress = 7;
inline void Plane::clear_sourceaddress() {
  sourceaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plane::sourceaddress() const {
  // @@protoc_insertion_point(field_get:tareados.Plane.sourceAddress)
  return sourceaddress_.GetNoArena();
}
inline void Plane::set_sourceaddress(const ::std::string& value) {
  
  sourceaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareados.Plane.sourceAddress)
}
#if LANG_CXX11
inline void Plane::set_sourceaddress(::std::string&& value) {
  
  sourceaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareados.Plane.sourceAddress)
}
#endif
inline void Plane::set_sourceaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sourceaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareados.Plane.sourceAddress)
}
inline void Plane::set_sourceaddress(const char* value, size_t size) {
  
  sourceaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareados.Plane.sourceAddress)
}
inline ::std::string* Plane::mutable_sourceaddress() {
  
  // @@protoc_insertion_point(field_mutable:tareados.Plane.sourceAddress)
  return sourceaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plane::release_sourceaddress() {
  // @@protoc_insertion_point(field_release:tareados.Plane.sourceAddress)
  
  return sourceaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plane::set_allocated_sourceaddress(::std::string* sourceaddress) {
  if (sourceaddress != NULL) {
    
  } else {
    
  }
  sourceaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceaddress);
  // @@protoc_insertion_point(field_set_allocated:tareados.Plane.sourceAddress)
}

// string destAddress = 8;
inline void Plane::clear_destaddress() {
  destaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Plane::destaddress() const {
  // @@protoc_insertion_point(field_get:tareados.Plane.destAddress)
  return destaddress_.GetNoArena();
}
inline void Plane::set_destaddress(const ::std::string& value) {
  
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tareados.Plane.destAddress)
}
#if LANG_CXX11
inline void Plane::set_destaddress(::std::string&& value) {
  
  destaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tareados.Plane.destAddress)
}
#endif
inline void Plane::set_destaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tareados.Plane.destAddress)
}
inline void Plane::set_destaddress(const char* value, size_t size) {
  
  destaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tareados.Plane.destAddress)
}
inline ::std::string* Plane::mutable_destaddress() {
  
  // @@protoc_insertion_point(field_mutable:tareados.Plane.destAddress)
  return destaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Plane::release_destaddress() {
  // @@protoc_insertion_point(field_release:tareados.Plane.destAddress)
  
  return destaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Plane::set_allocated_destaddress(::std::string* destaddress) {
  if (destaddress != NULL) {
    
  } else {
    
  }
  destaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destaddress);
  // @@protoc_insertion_point(field_set_allocated:tareados.Plane.destAddress)
}

// int32 runway = 9;
inline void Plane::clear_runway() {
  runway_ = 0;
}
inline ::google::protobuf::int32 Plane::runway() const {
  // @@protoc_insertion_point(field_get:tareados.Plane.runway)
  return runway_;
}
inline void Plane::set_runway(::google::protobuf::int32 value) {
  
  runway_ = value;
  // @@protoc_insertion_point(field_set:tareados.Plane.runway)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tareados

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_planecontrol_2eproto
