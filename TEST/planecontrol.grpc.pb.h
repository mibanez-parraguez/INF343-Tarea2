// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: planecontrol.proto
// Original file comments:
//
//
#ifndef GRPC_planecontrol_2eproto__INCLUDED
#define GRPC_planecontrol_2eproto__INCLUDED

#include "planecontrol.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tareados {

class PlaneControlService final {
 public:
  static constexpr char const* service_full_name() {
    return "tareados.PlaneControlService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Land(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::tareados::LandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tareados::LandResponse>> AsyncLand(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tareados::LandResponse>>(AsyncLandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tareados::LandResponse>> PrepareAsyncLand(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tareados::LandResponse>>(PrepareAsyncLandRaw(context, request, cq));
    }
    virtual ::grpc::Status Takeoff(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::tareados::TakeoffResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tareados::TakeoffResponse>> AsyncTakeoff(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tareados::TakeoffResponse>>(AsyncTakeoffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tareados::TakeoffResponse>> PrepareAsyncTakeoff(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tareados::TakeoffResponse>>(PrepareAsyncTakeoffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tareados::InfoResponse>> Info(::grpc::ClientContext* context, const ::tareados::InfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tareados::InfoResponse>>(InfoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tareados::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::tareados::InfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tareados::InfoResponse>>(AsyncInfoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tareados::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::tareados::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tareados::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tareados::LandResponse>* AsyncLandRaw(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tareados::LandResponse>* PrepareAsyncLandRaw(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tareados::TakeoffResponse>* AsyncTakeoffRaw(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tareados::TakeoffResponse>* PrepareAsyncTakeoffRaw(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tareados::InfoResponse>* InfoRaw(::grpc::ClientContext* context, const ::tareados::InfoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tareados::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::tareados::InfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tareados::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::tareados::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Land(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::tareados::LandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tareados::LandResponse>> AsyncLand(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tareados::LandResponse>>(AsyncLandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tareados::LandResponse>> PrepareAsyncLand(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tareados::LandResponse>>(PrepareAsyncLandRaw(context, request, cq));
    }
    ::grpc::Status Takeoff(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::tareados::TakeoffResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tareados::TakeoffResponse>> AsyncTakeoff(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tareados::TakeoffResponse>>(AsyncTakeoffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tareados::TakeoffResponse>> PrepareAsyncTakeoff(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tareados::TakeoffResponse>>(PrepareAsyncTakeoffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tareados::InfoResponse>> Info(::grpc::ClientContext* context, const ::tareados::InfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tareados::InfoResponse>>(InfoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tareados::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::tareados::InfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tareados::InfoResponse>>(AsyncInfoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tareados::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::tareados::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tareados::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tareados::LandResponse>* AsyncLandRaw(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tareados::LandResponse>* PrepareAsyncLandRaw(::grpc::ClientContext* context, const ::tareados::LandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tareados::TakeoffResponse>* AsyncTakeoffRaw(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tareados::TakeoffResponse>* PrepareAsyncTakeoffRaw(::grpc::ClientContext* context, const ::tareados::TakeoffRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tareados::InfoResponse>* InfoRaw(::grpc::ClientContext* context, const ::tareados::InfoRequest& request) override;
    ::grpc::ClientAsyncReader< ::tareados::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::tareados::InfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tareados::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::tareados::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Land_;
    const ::grpc::internal::RpcMethod rpcmethod_Takeoff_;
    const ::grpc::internal::RpcMethod rpcmethod_Info_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Land(::grpc::ServerContext* context, const ::tareados::LandRequest* request, ::tareados::LandResponse* response);
    virtual ::grpc::Status Takeoff(::grpc::ServerContext* context, const ::tareados::TakeoffRequest* request, ::tareados::TakeoffResponse* response);
    virtual ::grpc::Status Info(::grpc::ServerContext* context, const ::tareados::InfoRequest* request, ::grpc::ServerWriter< ::tareados::InfoResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Land : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Land() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Land() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Land(::grpc::ServerContext* context, const ::tareados::LandRequest* request, ::tareados::LandResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLand(::grpc::ServerContext* context, ::tareados::LandRequest* request, ::grpc::ServerAsyncResponseWriter< ::tareados::LandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Takeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Takeoff() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Takeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Takeoff(::grpc::ServerContext* context, const ::tareados::TakeoffRequest* request, ::tareados::TakeoffResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakeoff(::grpc::ServerContext* context, ::tareados::TakeoffRequest* request, ::grpc::ServerAsyncResponseWriter< ::tareados::TakeoffResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Info() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::tareados::InfoRequest* request, ::grpc::ServerWriter< ::tareados::InfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::tareados::InfoRequest* request, ::grpc::ServerAsyncWriter< ::tareados::InfoResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Land<WithAsyncMethod_Takeoff<WithAsyncMethod_Info<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Land : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Land() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Land() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Land(::grpc::ServerContext* context, const ::tareados::LandRequest* request, ::tareados::LandResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Takeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Takeoff() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Takeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Takeoff(::grpc::ServerContext* context, const ::tareados::TakeoffRequest* request, ::tareados::TakeoffResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Info() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::tareados::InfoRequest* request, ::grpc::ServerWriter< ::tareados::InfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Land : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Land() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Land() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Land(::grpc::ServerContext* context, const ::tareados::LandRequest* request, ::tareados::LandResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Takeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Takeoff() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Takeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Takeoff(::grpc::ServerContext* context, const ::tareados::TakeoffRequest* request, ::tareados::TakeoffResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakeoff(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Info() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::tareados::InfoRequest* request, ::grpc::ServerWriter< ::tareados::InfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Land : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Land() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::tareados::LandRequest, ::tareados::LandResponse>(std::bind(&WithStreamedUnaryMethod_Land<BaseClass>::StreamedLand, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Land() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Land(::grpc::ServerContext* context, const ::tareados::LandRequest* request, ::tareados::LandResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tareados::LandRequest,::tareados::LandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Takeoff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Takeoff() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::tareados::TakeoffRequest, ::tareados::TakeoffResponse>(std::bind(&WithStreamedUnaryMethod_Takeoff<BaseClass>::StreamedTakeoff, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Takeoff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Takeoff(::grpc::ServerContext* context, const ::tareados::TakeoffRequest* request, ::tareados::TakeoffResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTakeoff(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tareados::TakeoffRequest,::tareados::TakeoffResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Land<WithStreamedUnaryMethod_Takeoff<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Info() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::tareados::InfoRequest, ::tareados::InfoResponse>(std::bind(&WithSplitStreamingMethod_Info<BaseClass>::StreamedInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::tareados::InfoRequest* request, ::grpc::ServerWriter< ::tareados::InfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedInfo(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tareados::InfoRequest,::tareados::InfoResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Info<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Land<WithStreamedUnaryMethod_Takeoff<WithSplitStreamingMethod_Info<Service > > > StreamedService;
};

}  // namespace tareados


#endif  // GRPC_planecontrol_2eproto__INCLUDED
